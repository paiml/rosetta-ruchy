{
Import { path: "std::vec::Vec", items: [Named("Vec")] }
fun SCALE() -> i32 {
    1000
    }
fun ONE() -> i32 {
    1000
    }
fun HALF() -> i32 {
    500
    }
fun abs(x: i32) -> i32 {
    if x < 0 {
        Unary { op: Negate, operand: Expr { kind: Identifier("x"), span: Span { start: 504, end: 505 }, attributes: [] } }
        } else {
        x
        }
    }
fun max(a: i32, b: i32) -> i32 {
    if a > b {
        a
        } else {
        b
        }
    }
fun min(a: i32, b: i32) -> i32 {
    if a < b {
        a
        } else {
        b
        }
    }
fun exp_approx(x: i32) -> i32 {
    if x > 5 * Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 866, end: 871 }, attributes: [] }, args: [] } {
        Return { value: Some(Expr { kind: Binary { left: Expr { kind: Literal(Integer(148)), span: Span { start: 891, end: 894 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 897, end: 902 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
        }
    if x < Unary { op: Negate, operand: Expr { kind: Literal(Integer(5)), span: Span { start: 944, end: 945 }, attributes: [] } } * Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 948, end: 953 }, attributes: [] }, args: [] } {
        Return { value: Some(Expr { kind: Literal(Integer(7)), span: Span { start: 973, end: 974 }, attributes: [] }) }
        }
    var
    Assign { target: Expr { kind: Identifier("result"), span: Span { start: 1016, end: 1022 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 1025, end: 1030 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("term"), span: Span { start: 1042, end: 1046 }, attributes: [] }, value: Expr { kind: Identifier("x"), span: Span { start: 1049, end: 1050 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 1060, end: 1061 }, attributes: [] }, value: Expr { kind: Literal(Integer(1)), span: Span { start: 1064, end: 1065 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 1082, end: 1083 }, attributes: [] }, op: Less, right: Expr { kind: Literal(Integer(10)), span: Span { start: 1086, end: 1088 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("result"), span: Span { start: 1099, end: 1105 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("result"), span: Span { start: 1108, end: 1114 }, attributes: [] }, op: Add, right: Expr { kind: Identifier("term"), span: Span { start: 1117, end: 1121 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("term"), span: Span { start: 1131, end: 1135 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("term"), span: Span { start: 1139, end: 1143 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("x"), span: Span { start: 1146, end: 1147 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 1152, end: 1157 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 1163, end: 1164 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 1167, end: 1168 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 1180, end: 1181 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 1184, end: 1185 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 1188, end: 1189 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 1089, end: 1090 }, attributes: [] } }
    Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("max"), span: Span { start: 1213, end: 1216 }, attributes: [] }, args: [Expr { kind: Literal(Integer(1)), span: Span { start: 1217, end: 1218 }, attributes: [] }, Expr { kind: Identifier("result"), span: Span { start: 1220, end: 1226 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun sqrt_int(x: i32) -> i32 {
    if x <= 0 {
        Return { value: Some(Expr { kind: Literal(Integer(0)), span: Span { start: 1322, end: 1323 }, attributes: [] }) }
        }
    var
    Assign { target: Expr { kind: Identifier("guess"), span: Span { start: 1340, end: 1345 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("x"), span: Span { start: 1348, end: 1349 }, attributes: [] }, op: Divide, right: Expr { kind: Literal(Integer(2)), span: Span { start: 1352, end: 1353 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
    if guess == 0 {
        Assign { target: Expr { kind: Identifier("guess"), span: Span { start: 1375, end: 1380 }, attributes: [] }, value: Expr { kind: Literal(Integer(1)), span: Span { start: 1383, end: 1384 }, attributes: [] } }
        }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 1401, end: 1402 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 1405, end: 1406 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 1418, end: 1419 }, attributes: [] }, op: Less, right: Expr { kind: Literal(Integer(20)), span: Span { start: 1422, end: 1424 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 1435, end: 1438 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("new_guess"), span: Span { start: 1439, end: 1448 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("guess"), span: Span { start: 1452, end: 1457 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Identifier("x"), span: Span { start: 1460, end: 1461 }, attributes: [] }, op: Divide, right: Expr { kind: Identifier("guess"), span: Span { start: 1464, end: 1469 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Literal(Integer(2)), span: Span { start: 1473, end: 1474 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("abs"), span: Span { start: 1487, end: 1490 }, attributes: [] }, args: [Expr { kind: Binary { left: Expr { kind: Identifier("new_guess"), span: Span { start: 1491, end: 1500 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("guess"), span: Span { start: 1503, end: 1508 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Less, right: Expr { kind: Literal(Integer(1)), span: Span { start: 1512, end: 1513 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Return { value: Some(Expr { kind: Identifier("new_guess"), span: Span { start: 1535, end: 1544 }, attributes: [] }) }, span: Span { start: 1528, end: 1534 }, attributes: [] }]), span: Span { start: 1514, end: 1515 }, attributes: [] }, else_branch: None }, span: Span { start: 1484, end: 1486 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("guess"), span: Span { start: 1564, end: 1569 }, attributes: [] }, value: Expr { kind: Identifier("new_guess"), span: Span { start: 1572, end: 1581 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 1591, end: 1592 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 1595, end: 1596 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 1599, end: 1600 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 1425, end: 1426 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("guess"), span: Span { start: 1624, end: 1629 }, attributes: [] }) }
    }
fun sigmoid(x: i32) -> i32 {
    let exp_neg_x = Call { func: Expr { kind: Identifier("exp_approx"), span: Span { start: 1855, end: 1865 }, attributes: [] }, args: [Expr { kind: Unary { op: Negate, operand: Expr { kind: Identifier("x"), span: Span { start: 1867, end: 1868 }, attributes: [] } }, span: Span { start: 1866, end: 1867 }, attributes: [] }] } in Return { value: Some(Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 1882, end: 1887 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 1892, end: 1897 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 1903, end: 1908 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Identifier("exp_neg_x"), span: Span { start: 1913, end: 1922 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun sigmoid_derivative(x: i32) -> i32 {
    let sig = Call { func: Expr { kind: Identifier("sigmoid"), span: Span { start: 2034, end: 2041 }, attributes: [] }, args: [Expr { kind: Identifier("x"), span: Span { start: 2042, end: 2043 }, attributes: [] }] } in Return { value: Some(Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("sig"), span: Span { start: 2058, end: 2061 }, attributes: [] }, op: Multiply, right: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2065, end: 2070 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("sig"), span: Span { start: 2075, end: 2078 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2083, end: 2088 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun relu(x: i32) -> i32 {
    Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("max"), span: Span { start: 2234, end: 2237 }, attributes: [] }, args: [Expr { kind: Literal(Integer(0)), span: Span { start: 2238, end: 2239 }, attributes: [] }, Expr { kind: Identifier("x"), span: Span { start: 2241, end: 2242 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun relu_derivative(x: i32) -> i32 {
    if x > 0 {
        Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2339, end: 2344 }, attributes: [] }, args: [] }
        } else {
        0
        }
    }
fun tanh(x: i32) -> i32 {
    let exp_2x = Call { func: Expr { kind: Identifier("exp_approx"), span: Span { start: 2498, end: 2508 }, attributes: [] }, args: [Expr { kind: Binary { left: Expr { kind: Literal(Integer(2)), span: Span { start: 2509, end: 2510 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("x"), span: Span { start: 2513, end: 2514 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] } in {
        if exp_2x > 100 * Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2539, end: 2544 }, attributes: [] }, args: [] } {
            Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2564, end: 2569 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
            }
        Return { value: Some(Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2590, end: 2595 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Binary { left: Expr { kind: Identifier("exp_2x"), span: Span { start: 2601, end: 2607 }, attributes: [] }, op: Subtract, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2610, end: 2615 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Binary { left: Expr { kind: Identifier("exp_2x"), span: Span { start: 2622, end: 2628 }, attributes: [] }, op: Add, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2631, end: 2636 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
        }
    }
fun tanh_derivative(x: i32) -> i32 {
    let t = Call { func: Expr { kind: Identifier("tanh"), span: Span { start: 2727, end: 2731 }, attributes: [] }, args: [Expr { kind: Identifier("x"), span: Span { start: 2732, end: 2733 }, attributes: [] }] } in Return { value: Some(Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2747, end: 2752 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("t"), span: Span { start: 2758, end: 2759 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("t"), span: Span { start: 2762, end: 2763 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 2767, end: 2772 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun mse_loss(y_pred: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, y_true: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> i32 {
    if MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 3033, end: 3039 }, attributes: [] }, method: "len", args: [] } != MethodCall { receiver: Expr { kind: Identifier("y_true"), span: Span { start: 3049, end: 3055 }, attributes: [] }, method: "len", args: [] } {
        Return { value: Some(Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(1)), span: Span { start: 3080, end: 3081 }, attributes: [] } }, span: Span { start: 3079, end: 3080 }, attributes: [] }) }
        }
    var
    Assign { target: Expr { kind: Identifier("sum"), span: Span { start: 3102, end: 3105 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 3108, end: 3109 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 3119, end: 3120 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 3123, end: 3124 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 3136, end: 3137 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 3140, end: 3146 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "diff", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("y_pred"), span: Span { start: 3174, end: 3180 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 3181, end: 3182 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("y_true"), span: Span { start: 3186, end: 3192 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 3193, end: 3194 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("sum"), span: Span { start: 3205, end: 3208 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("sum"), span: Span { start: 3211, end: 3214 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("diff"), span: Span { start: 3218, end: 3222 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("diff"), span: Span { start: 3225, end: 3229 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 3233, end: 3238 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 3250, end: 3251 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 3254, end: 3255 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 3258, end: 3259 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 3153, end: 3154 }, attributes: [] }, is_mutable: false }, span: Span { start: 3153, end: 3154 }, attributes: [] }]), span: Span { start: 3153, end: 3154 }, attributes: [] } }
    Return { value: Some(Expr { kind: Binary { left: Expr { kind: Identifier("sum"), span: Span { start: 3283, end: 3286 }, attributes: [] }, op: Divide, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 3289, end: 3295 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun mse_gradient(y_pred: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, y_true: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("gradients"), span: Span { start: 3443, end: 3452 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 3455, end: 3458 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 3475, end: 3476 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 3479, end: 3480 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 3497, end: 3498 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 3501, end: 3507 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "grad", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Literal(Integer(2)), span: Span { start: 3535, end: 3536 }, attributes: [] }, op: Multiply, right: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("y_pred"), span: Span { start: 3540, end: 3546 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 3547, end: 3548 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("y_true"), span: Span { start: 3552, end: 3558 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 3559, end: 3560 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 3565, end: 3571 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("gradients"), span: Span { start: 3587, end: 3596 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("grad"), span: Span { start: 3602, end: 3606 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 3617, end: 3618 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 3621, end: 3622 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 3625, end: 3626 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 3514, end: 3515 }, attributes: [] }, is_mutable: false }, span: Span { start: 3514, end: 3515 }, attributes: [] }]), span: Span { start: 3514, end: 3515 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("gradients"), span: Span { start: 3650, end: 3659 }, attributes: [] }) }
    }
fun cross_entropy_loss(y_pred: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, y_true: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> i32 {
    var
    Assign { target: Expr { kind: Identifier("loss"), span: Span { start: 3861, end: 3865 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 3868, end: 3869 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 3879, end: 3880 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 3883, end: 3884 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 3901, end: 3902 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 3905, end: 3911 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "p", type_annotation: None, value: Expr { kind: Call { func: Expr { kind: Identifier("max"), span: Span { start: 3936, end: 3939 }, attributes: [] }, args: [Expr { kind: Literal(Integer(1)), span: Span { start: 3940, end: 3941 }, attributes: [] }, Expr { kind: Call { func: Expr { kind: Identifier("min"), span: Span { start: 3943, end: 3946 }, attributes: [] }, args: [Expr { kind: Literal(Integer(999)), span: Span { start: 3947, end: 3950 }, attributes: [] }, Expr { kind: IndexAccess { object: Expr { kind: Identifier("y_pred"), span: Span { start: 3952, end: 3958 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 3959, end: 3960 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("y_true"), span: Span { start: 4000, end: 4006 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 4007, end: 4008 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Greater, right: Expr { kind: Call { func: Expr { kind: Identifier("HALF"), span: Span { start: 4012, end: 4016 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("loss"), span: Span { start: 4033, end: 4037 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("loss"), span: Span { start: 4040, end: 4044 }, attributes: [] }, op: Subtract, right: Expr { kind: Call { func: Expr { kind: Identifier("log_approx"), span: Span { start: 4047, end: 4057 }, attributes: [] }, args: [Expr { kind: Identifier("p"), span: Span { start: 4058, end: 4059 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 4019, end: 4020 }, attributes: [] }, else_branch: Some(Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("loss"), span: Span { start: 4091, end: 4095 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("loss"), span: Span { start: 4098, end: 4102 }, attributes: [] }, op: Subtract, right: Expr { kind: Call { func: Expr { kind: Identifier("log_approx"), span: Span { start: 4105, end: 4115 }, attributes: [] }, args: [Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 4116, end: 4121 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("p"), span: Span { start: 4126, end: 4127 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 4077, end: 4078 }, attributes: [] }) }, span: Span { start: 3997, end: 3999 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 4148, end: 4149 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 4152, end: 4153 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 4156, end: 4157 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 3918, end: 3919 }, attributes: [] }, is_mutable: false }, span: Span { start: 3918, end: 3919 }, attributes: [] }]), span: Span { start: 3918, end: 3919 }, attributes: [] } }
    Return { value: Some(Expr { kind: Binary { left: Expr { kind: Identifier("loss"), span: Span { start: 4181, end: 4185 }, attributes: [] }, op: Divide, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("y_pred"), span: Span { start: 4188, end: 4194 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun log_approx(x: i32) -> i32 {
    if x <= 0 {
        Return { value: Some(Expr { kind: Binary { left: Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(10)), span: Span { start: 4307, end: 4309 }, attributes: [] } }, span: Span { start: 4306, end: 4307 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 4312, end: 4317 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
        }
    if x >= Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 4335, end: 4340 }, attributes: [] }, args: [] } {
        Return { value: Some(Expr { kind: Literal(Integer(0)), span: Span { start: 4352, end: 4353 }, attributes: [] }) }
        }
    Return { value: Some(Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("x"), span: Span { start: 4421, end: 4422 }, attributes: [] }, op: Subtract, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 4425, end: 4430 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Literal(Integer(2)), span: Span { start: 4436, end: 4437 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun perceptron_forward(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, bias: i32) -> i32 {
    if MethodCall { receiver: Expr { kind: Identifier("inputs"), span: Span { start: 4738, end: 4744 }, attributes: [] }, method: "len", args: [] } != MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 4754, end: 4761 }, attributes: [] }, method: "len", args: [] } {
        Return { value: Some(Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(1)), span: Span { start: 4786, end: 4787 }, attributes: [] } }, span: Span { start: 4785, end: 4786 }, attributes: [] }) }
        }
    var
    Assign { target: Expr { kind: Identifier("weighted_sum"), span: Span { start: 4808, end: 4820 }, attributes: [] }, value: Expr { kind: Identifier("bias"), span: Span { start: 4823, end: 4827 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 4837, end: 4838 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 4841, end: 4842 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 4859, end: 4860 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("inputs"), span: Span { start: 4863, end: 4869 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("weighted_sum"), span: Span { start: 4886, end: 4898 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("weighted_sum"), span: Span { start: 4901, end: 4913 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("inputs"), span: Span { start: 4917, end: 4923 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 4924, end: 4925 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 4929, end: 4936 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 4937, end: 4938 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 4943, end: 4948 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 4960, end: 4961 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 4964, end: 4965 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 4968, end: 4969 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 4876, end: 4877 }, attributes: [] } }
    Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("sigmoid"), span: Span { start: 4993, end: 5000 }, attributes: [] }, args: [Expr { kind: Identifier("weighted_sum"), span: Span { start: 5001, end: 5013 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun layer_forward(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, biases: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, activation: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("outputs"), span: Span { start: 5173, end: 5180 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 5183, end: 5186 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 5203, end: 5204 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 5207, end: 5208 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 5225, end: 5226 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 5229, end: 5236 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 5253, end: 5256 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("weighted_sum"), span: Span { start: 5257, end: 5269 }, attributes: [] }, value: Expr { kind: IndexAccess { object: Expr { kind: Identifier("biases"), span: Span { start: 5272, end: 5278 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 5279, end: 5280 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 5291, end: 5294 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 5295, end: 5296 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 5299, end: 5300 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 5325, end: 5326 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("inputs"), span: Span { start: 5329, end: 5335 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("weighted_sum"), span: Span { start: 5356, end: 5368 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("weighted_sum"), span: Span { start: 5371, end: 5383 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("inputs"), span: Span { start: 5387, end: 5393 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 5394, end: 5395 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 5399, end: 5406 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 5407, end: 5408 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 5410, end: 5411 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 5416, end: 5421 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 5437, end: 5438 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 5441, end: 5442 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 5445, end: 5446 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 5342, end: 5343 }, attributes: [] } }, span: Span { start: 5319, end: 5324 }, attributes: [] }, Expr { kind: Let { name: "output", type_annotation: None, value: Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("activation"), span: Span { start: 5528, end: 5538 }, attributes: [] }, op: Equal, right: Expr { kind: Literal(Integer(0)), span: Span { start: 5542, end: 5543 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Call { func: Expr { kind: Identifier("sigmoid"), span: Span { start: 5558, end: 5565 }, attributes: [] }, args: [Expr { kind: Identifier("weighted_sum"), span: Span { start: 5566, end: 5578 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 5544, end: 5545 }, attributes: [] }, else_branch: Some(Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("activation"), span: Span { start: 5598, end: 5608 }, attributes: [] }, op: Equal, right: Expr { kind: Literal(Integer(1)), span: Span { start: 5612, end: 5613 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Call { func: Expr { kind: Identifier("relu"), span: Span { start: 5628, end: 5632 }, attributes: [] }, args: [Expr { kind: Identifier("weighted_sum"), span: Span { start: 5633, end: 5645 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 5614, end: 5615 }, attributes: [] }, else_branch: Some(Expr { kind: Block([Expr { kind: Call { func: Expr { kind: Identifier("tanh"), span: Span { start: 5676, end: 5680 }, attributes: [] }, args: [Expr { kind: Identifier("weighted_sum"), span: Span { start: 5681, end: 5693 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 5662, end: 5663 }, attributes: [] }) }, span: Span { start: 5595, end: 5597 }, attributes: [] }) }, span: Span { start: 5525, end: 5527 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("outputs"), span: Span { start: 5723, end: 5730 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("output"), span: Span { start: 5736, end: 5742 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 5753, end: 5754 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 5757, end: 5758 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 5761, end: 5762 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 5243, end: 5244 }, attributes: [] }, is_mutable: false }, span: Span { start: 5243, end: 5244 }, attributes: [] }]), span: Span { start: 5243, end: 5244 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("outputs"), span: Span { start: 5786, end: 5793 }, attributes: [] }) }
    }
fun neural_network_forward(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, layer1_weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, layer1_biases: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, layer2_weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, layer2_biases: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    let hidden = Call { func: Expr { kind: Identifier("layer_forward"), span: Span { start: 6096, end: 6109 }, attributes: [] }, args: [Expr { kind: Identifier("inputs"), span: Span { start: 6110, end: 6116 }, attributes: [] }, Expr { kind: Identifier("layer1_weights"), span: Span { start: 6118, end: 6132 }, attributes: [] }, Expr { kind: Identifier("layer1_biases"), span: Span { start: 6134, end: 6147 }, attributes: [] }, Expr { kind: Literal(Integer(1)), span: Span { start: 6149, end: 6150 }, attributes: [] }] } in Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("layer_forward"), span: Span { start: 6213, end: 6226 }, attributes: [] }, args: [Expr { kind: Identifier("hidden"), span: Span { start: 6227, end: 6233 }, attributes: [] }, Expr { kind: Identifier("layer2_weights"), span: Span { start: 6235, end: 6249 }, attributes: [] }, Expr { kind: Identifier("layer2_biases"), span: Span { start: 6251, end: 6264 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 6266, end: 6267 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun compute_gradients(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, outputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, activation: i32) -> Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("weight_gradients"), span: Span { start: 6619, end: 6635 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 6638, end: 6641 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("output_errors"), span: Span { start: 6691, end: 6704 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 6707, end: 6710 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 6727, end: 6728 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 6731, end: 6732 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 6744, end: 6745 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("outputs"), span: Span { start: 6748, end: 6755 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "error", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("outputs"), span: Span { start: 6784, end: 6791 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 6792, end: 6793 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("targets"), span: Span { start: 6797, end: 6804 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 6805, end: 6806 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "derivative", type_annotation: None, value: Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("activation"), span: Span { start: 6885, end: 6895 }, attributes: [] }, op: Equal, right: Expr { kind: Literal(Integer(0)), span: Span { start: 6899, end: 6900 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Call { func: Expr { kind: Identifier("sigmoid_derivative"), span: Span { start: 6915, end: 6933 }, attributes: [] }, args: [Expr { kind: IndexAccess { object: Expr { kind: Identifier("outputs"), span: Span { start: 6934, end: 6941 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 6942, end: 6943 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 6901, end: 6902 }, attributes: [] }, else_branch: Some(Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("activation"), span: Span { start: 6964, end: 6974 }, attributes: [] }, op: Equal, right: Expr { kind: Literal(Integer(1)), span: Span { start: 6978, end: 6979 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Call { func: Expr { kind: Identifier("relu_derivative"), span: Span { start: 6994, end: 7009 }, attributes: [] }, args: [Expr { kind: IndexAccess { object: Expr { kind: Identifier("outputs"), span: Span { start: 7010, end: 7017 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 7018, end: 7019 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 6980, end: 6981 }, attributes: [] }, else_branch: Some(Expr { kind: Block([Expr { kind: Call { func: Expr { kind: Identifier("tanh_derivative"), span: Span { start: 7051, end: 7066 }, attributes: [] }, args: [Expr { kind: IndexAccess { object: Expr { kind: Identifier("outputs"), span: Span { start: 7067, end: 7074 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 7075, end: 7076 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 7037, end: 7038 }, attributes: [] }) }, span: Span { start: 6961, end: 6963 }, attributes: [] }) }, span: Span { start: 6882, end: 6884 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 6865, end: 6868 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("output_errors"), span: Span { start: 7107, end: 7120 }, attributes: [] }, method: "push", args: [Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("error"), span: Span { start: 7127, end: 7132 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("derivative"), span: Span { start: 7135, end: 7145 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 7149, end: 7154 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 7167, end: 7168 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 7171, end: 7172 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 7175, end: 7176 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 6762, end: 6763 }, attributes: [] }, is_mutable: false }, span: Span { start: 6762, end: 6763 }, attributes: [] }]), span: Span { start: 6762, end: 6763 }, attributes: [] } }
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 7225, end: 7226 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 7229, end: 7230 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 7242, end: 7243 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 7246, end: 7253 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 7270, end: 7273 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("row_gradients"), span: Span { start: 7274, end: 7287 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 7290, end: 7293 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 7310, end: 7313 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 7314, end: 7315 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 7318, end: 7319 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 7344, end: 7345 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("inputs"), span: Span { start: 7348, end: 7354 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "gradient", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("inputs"), span: Span { start: 7391, end: 7397 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 7398, end: 7399 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("output_errors"), span: Span { start: 7403, end: 7416 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 7417, end: 7418 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 7423, end: 7428 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("row_gradients"), span: Span { start: 7444, end: 7457 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("gradient"), span: Span { start: 7463, end: 7471 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 7486, end: 7487 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 7490, end: 7491 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 7494, end: 7495 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 7361, end: 7362 }, attributes: [] }, is_mutable: false }, span: Span { start: 7361, end: 7362 }, attributes: [] }]), span: Span { start: 7361, end: 7362 }, attributes: [] } }, span: Span { start: 7338, end: 7343 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weight_gradients"), span: Span { start: 7524, end: 7540 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("row_gradients"), span: Span { start: 7546, end: 7559 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 7570, end: 7571 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 7574, end: 7575 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 7578, end: 7579 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 7260, end: 7261 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("weight_gradients"), span: Span { start: 7603, end: 7619 }, attributes: [] }) }
    }
fun backpropagation(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, hidden: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, outputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, layer1_weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, layer2_weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }) -> Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("output_errors"), span: Span { start: 8003, end: 8016 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 8019, end: 8022 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8039, end: 8040 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8043, end: 8044 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8056, end: 8057 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("outputs"), span: Span { start: 8060, end: 8067 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "error", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("outputs"), span: Span { start: 8096, end: 8103 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 8104, end: 8105 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("targets"), span: Span { start: 8109, end: 8116 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 8117, end: 8118 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "derivative", type_annotation: None, value: Expr { kind: Call { func: Expr { kind: Identifier("sigmoid_derivative"), span: Span { start: 8146, end: 8164 }, attributes: [] }, args: [Expr { kind: IndexAccess { object: Expr { kind: Identifier("outputs"), span: Span { start: 8165, end: 8172 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 8173, end: 8174 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 8129, end: 8132 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("output_errors"), span: Span { start: 8186, end: 8199 }, attributes: [] }, method: "push", args: [Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("error"), span: Span { start: 8206, end: 8211 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("derivative"), span: Span { start: 8214, end: 8224 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 8228, end: 8233 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8246, end: 8247 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8250, end: 8251 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 8254, end: 8255 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8074, end: 8075 }, attributes: [] }, is_mutable: false }, span: Span { start: 8074, end: 8075 }, attributes: [] }]), span: Span { start: 8074, end: 8075 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("hidden_errors"), span: Span { start: 8320, end: 8333 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 8336, end: 8339 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8352, end: 8353 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8356, end: 8357 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8369, end: 8370 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("hidden"), span: Span { start: 8373, end: 8379 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 8396, end: 8399 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("error"), span: Span { start: 8400, end: 8405 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8408, end: 8409 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 8419, end: 8422 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 8423, end: 8424 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8427, end: 8428 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 8453, end: 8454 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("output_errors"), span: Span { start: 8457, end: 8470 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("error"), span: Span { start: 8491, end: 8496 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("error"), span: Span { start: 8499, end: 8504 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("layer2_weights"), span: Span { start: 8508, end: 8522 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 8523, end: 8524 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 8526, end: 8527 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("output_errors"), span: Span { start: 8531, end: 8544 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 8545, end: 8546 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 8551, end: 8556 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 8572, end: 8573 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 8576, end: 8577 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 8580, end: 8581 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8477, end: 8478 }, attributes: [] } }, span: Span { start: 8447, end: 8452 }, attributes: [] }, Expr { kind: Let { name: "derivative", type_annotation: None, value: Expr { kind: Call { func: Expr { kind: Identifier("relu_derivative"), span: Span { start: 8627, end: 8642 }, attributes: [] }, args: [Expr { kind: IndexAccess { object: Expr { kind: Identifier("hidden"), span: Span { start: 8643, end: 8649 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 8650, end: 8651 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("hidden_errors"), span: Span { start: 8663, end: 8676 }, attributes: [] }, method: "push", args: [Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("error"), span: Span { start: 8683, end: 8688 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("derivative"), span: Span { start: 8691, end: 8701 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 8705, end: 8710 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8723, end: 8724 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8727, end: 8728 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 8731, end: 8732 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8386, end: 8387 }, attributes: [] }, is_mutable: false }, span: Span { start: 8386, end: 8387 }, attributes: [] }]), span: Span { start: 8386, end: 8387 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("gradients"), span: Span { start: 8790, end: 8799 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 8802, end: 8805 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8818, end: 8819 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8822, end: 8823 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8835, end: 8836 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("layer1_weights"), span: Span { start: 8839, end: 8853 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 8870, end: 8873 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("row_gradients"), span: Span { start: 8874, end: 8887 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 8890, end: 8893 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 8910, end: 8913 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 8914, end: 8915 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8918, end: 8919 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 8944, end: 8945 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("inputs"), span: Span { start: 8948, end: 8954 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "gradient", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("inputs"), span: Span { start: 8991, end: 8997 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 8998, end: 8999 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("hidden_errors"), span: Span { start: 9003, end: 9016 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 9017, end: 9018 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 9023, end: 9028 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("row_gradients"), span: Span { start: 9044, end: 9057 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("gradient"), span: Span { start: 9063, end: 9071 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 9086, end: 9087 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 9090, end: 9091 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 9094, end: 9095 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8961, end: 8962 }, attributes: [] }, is_mutable: false }, span: Span { start: 8961, end: 8962 }, attributes: [] }]), span: Span { start: 8961, end: 8962 }, attributes: [] } }, span: Span { start: 8938, end: 8943 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("gradients"), span: Span { start: 9124, end: 9133 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("row_gradients"), span: Span { start: 9139, end: 9152 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 9163, end: 9164 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 9167, end: 9168 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 9171, end: 9172 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8860, end: 8861 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("gradients"), span: Span { start: 9196, end: 9205 }, attributes: [] }) }
    }
fun sgd_update(weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, gradients: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, learning_rate: i32) -> Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("updated_weights"), span: Span { start: 9506, end: 9521 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 9524, end: 9527 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 9544, end: 9545 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 9548, end: 9549 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 9566, end: 9567 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 9570, end: 9577 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 9594, end: 9597 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("updated_row"), span: Span { start: 9598, end: 9609 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 9612, end: 9615 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 9632, end: 9635 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 9636, end: 9637 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 9640, end: 9641 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 9666, end: 9667 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 9670, end: 9677 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 9678, end: 9679 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "update", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("learning_rate"), span: Span { start: 9715, end: 9728 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 9731, end: 9740 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 9741, end: 9742 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 9744, end: 9745 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 9750, end: 9755 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "new_weight", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 9788, end: 9795 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 9796, end: 9797 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 9799, end: 9800 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("update"), span: Span { start: 9804, end: 9810 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 9771, end: 9774 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("updated_row"), span: Span { start: 9824, end: 9835 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("new_weight"), span: Span { start: 9841, end: 9851 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 9866, end: 9867 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 9870, end: 9871 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 9874, end: 9875 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 9687, end: 9688 }, attributes: [] }, is_mutable: false }, span: Span { start: 9687, end: 9688 }, attributes: [] }]), span: Span { start: 9687, end: 9688 }, attributes: [] } }, span: Span { start: 9660, end: 9665 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("updated_weights"), span: Span { start: 9904, end: 9919 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("updated_row"), span: Span { start: 9925, end: 9936 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 9947, end: 9948 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 9951, end: 9952 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 9955, end: 9956 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 9584, end: 9585 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("updated_weights"), span: Span { start: 9980, end: 9995 }, attributes: [] }) }
    }
fun sgd_momentum_update(weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, gradients: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, velocity: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, learning_rate: i32, momentum: i32) -> Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("updated_weights"), span: Span { start: 10256, end: 10271 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 10274, end: 10277 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 10294, end: 10295 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 10298, end: 10299 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 10316, end: 10317 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 10320, end: 10327 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 10344, end: 10347 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("updated_row"), span: Span { start: 10348, end: 10359 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 10362, end: 10365 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 10382, end: 10385 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 10386, end: 10387 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 10390, end: 10391 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 10416, end: 10417 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 10420, end: 10427 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 10428, end: 10429 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "new_velocity", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("momentum"), span: Span { start: 10547, end: 10555 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("velocity"), span: Span { start: 10558, end: 10566 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 10567, end: 10568 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 10570, end: 10571 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 10576, end: 10581 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("learning_rate"), span: Span { start: 10618, end: 10631 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 10634, end: 10643 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 10644, end: 10645 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 10647, end: 10648 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 10653, end: 10658 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "new_weight", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 10745, end: 10752 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 10753, end: 10754 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 10756, end: 10757 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Identifier("new_velocity"), span: Span { start: 10761, end: 10773 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 10728, end: 10731 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("updated_row"), span: Span { start: 10787, end: 10798 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("new_weight"), span: Span { start: 10804, end: 10814 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 10829, end: 10830 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 10833, end: 10834 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 10837, end: 10838 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 10437, end: 10438 }, attributes: [] }, is_mutable: false }, span: Span { start: 10437, end: 10438 }, attributes: [] }]), span: Span { start: 10437, end: 10438 }, attributes: [] } }, span: Span { start: 10410, end: 10415 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("updated_weights"), span: Span { start: 10867, end: 10882 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("updated_row"), span: Span { start: 10888, end: 10899 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 10910, end: 10911 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 10914, end: 10915 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 10918, end: 10919 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 10334, end: 10335 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("updated_weights"), span: Span { start: 10943, end: 10958 }, attributes: [] }) }
    }
fun adam_update(weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, gradients: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, m: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, v: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, t: i32, learning_rate: i32, beta1: i32, beta2: i32) -> Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("updated_weights"), span: Span { start: 11220, end: 11235 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 11238, end: 11241 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    let epsilon = 1 in {
        var
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 11328, end: 11329 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 11332, end: 11333 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 11345, end: 11346 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 11349, end: 11356 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 11373, end: 11376 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("updated_row"), span: Span { start: 11377, end: 11388 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 11391, end: 11394 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 11411, end: 11414 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 11415, end: 11416 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 11419, end: 11420 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 11445, end: 11446 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 11449, end: 11456 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 11457, end: 11458 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "new_m", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("beta1"), span: Span { start: 11544, end: 11549 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("m"), span: Span { start: 11552, end: 11553 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 11554, end: 11555 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 11557, end: 11558 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11563, end: 11568 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("beta1"), span: Span { start: 11573, end: 11578 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 11582, end: 11591 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 11592, end: 11593 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 11595, end: 11596 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11601, end: 11606 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "grad_squared", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 11707, end: 11716 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 11717, end: 11718 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 11720, end: 11721 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 11725, end: 11734 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 11735, end: 11736 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 11738, end: 11739 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11744, end: 11749 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 11687, end: 11690 }, attributes: [] }, Expr { kind: Let { name: "new_v", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("beta2"), span: Span { start: 11778, end: 11783 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("v"), span: Span { start: 11786, end: 11787 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 11788, end: 11789 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 11791, end: 11792 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11797, end: 11802 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("beta2"), span: Span { start: 11807, end: 11812 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("grad_squared"), span: Span { start: 11816, end: 11828 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11832, end: 11837 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 11765, end: 11768 }, attributes: [] }, Expr { kind: Let { name: "m_hat", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("new_m"), span: Span { start: 11909, end: 11914 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11917, end: 11922 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11928, end: 11933 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Call { func: Expr { kind: Identifier("pow_int"), span: Span { start: 11938, end: 11945 }, attributes: [] }, args: [Expr { kind: Identifier("beta1"), span: Span { start: 11946, end: 11951 }, attributes: [] }, Expr { kind: Identifier("t"), span: Span { start: 11953, end: 11954 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 11897, end: 11900 }, attributes: [] }, Expr { kind: Let { name: "v_hat", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("new_v"), span: Span { start: 11982, end: 11987 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 11990, end: 11995 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 12001, end: 12006 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Call { func: Expr { kind: Identifier("pow_int"), span: Span { start: 12011, end: 12018 }, attributes: [] }, args: [Expr { kind: Identifier("beta2"), span: Span { start: 12019, end: 12024 }, attributes: [] }, Expr { kind: Identifier("t"), span: Span { start: 12026, end: 12027 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 11970, end: 11973 }, attributes: [] }, Expr { kind: Let { name: "update", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("learning_rate"), span: Span { start: 12100, end: 12113 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("m_hat"), span: Span { start: 12116, end: 12121 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Binary { left: Expr { kind: Call { func: Expr { kind: Identifier("sqrt_int"), span: Span { start: 12126, end: 12134 }, attributes: [] }, args: [Expr { kind: Identifier("v_hat"), span: Span { start: 12135, end: 12140 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Identifier("epsilon"), span: Span { start: 12144, end: 12151 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 12086, end: 12089 }, attributes: [] }, Expr { kind: Let { name: "new_weight", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 12183, end: 12190 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 12191, end: 12192 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 12194, end: 12195 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("update"), span: Span { start: 12199, end: 12205 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Literal(Unit), span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: true }, span: Span { start: 12166, end: 12169 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("updated_row"), span: Span { start: 12219, end: 12230 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("new_weight"), span: Span { start: 12236, end: 12246 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 12261, end: 12262 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 12265, end: 12266 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12269, end: 12270 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 11466, end: 11467 }, attributes: [] }, is_mutable: false }, span: Span { start: 11466, end: 11467 }, attributes: [] }]), span: Span { start: 11466, end: 11467 }, attributes: [] } }, span: Span { start: 11439, end: 11444 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("updated_weights"), span: Span { start: 12299, end: 12314 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("updated_row"), span: Span { start: 12320, end: 12331 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 12342, end: 12343 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 12346, end: 12347 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12350, end: 12351 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 11363, end: 11364 }, attributes: [] } }
        Return { value: Some(Expr { kind: Identifier("updated_weights"), span: Span { start: 12375, end: 12390 }, attributes: [] }) }
        }
    }
fun pow_int(base: i32, exp: i32) -> i32 {
    var
    Assign { target: Expr { kind: Identifier("result"), span: Span { start: 12482, end: 12488 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 12491, end: 12496 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 12508, end: 12509 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 12512, end: 12513 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 12530, end: 12531 }, attributes: [] }, op: Less, right: Expr { kind: Identifier("exp"), span: Span { start: 12534, end: 12537 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("result"), span: Span { start: 12548, end: 12554 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("result"), span: Span { start: 12558, end: 12564 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("base"), span: Span { start: 12567, end: 12571 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 12575, end: 12580 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 12592, end: 12593 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 12596, end: 12597 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12600, end: 12601 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 12538, end: 12539 }, attributes: [] } }
    Return { value: Some(Expr { kind: Identifier("result"), span: Span { start: 12625, end: 12631 }, attributes: [] }) }
    }
fun xavier_init(fan_in: i32, fan_out: i32) -> i32 {
    let variance = 2 * Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 12980, end: 12985 }, attributes: [] }, args: [] } / fan_in + fan_out in Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("sqrt_int"), span: Span { start: 13021, end: 13029 }, attributes: [] }, args: [Expr { kind: Identifier("variance"), span: Span { start: 13030, end: 13038 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun he_init(fan_in: i32) -> i32 {
    let variance = 2 * Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 13185, end: 13190 }, attributes: [] }, args: [] } / fan_in in Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("sqrt_int"), span: Span { start: 13214, end: 13222 }, attributes: [] }, args: [Expr { kind: Identifier("variance"), span: Span { start: 13223, end: 13231 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun init_weights_xavier(rows: i32, cols: i32, seed: i32) -> Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("weights"), span: Span { start: 13376, end: 13383 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 13386, end: 13389 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    let scale = Call { func: Expr { kind: Identifier("xavier_init"), span: Span { start: 13414, end: 13425 }, attributes: [] }, args: [Expr { kind: Identifier("cols"), span: Span { start: 13426, end: 13430 }, attributes: [] }, Expr { kind: Identifier("rows"), span: Span { start: 13432, end: 13436 }, attributes: [] }] } in {
        var
        Assign { target: Expr { kind: Identifier("rand_state"), span: Span { start: 13447, end: 13457 }, attributes: [] }, value: Expr { kind: Identifier("seed"), span: Span { start: 13460, end: 13464 }, attributes: [] } }
        var
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 13479, end: 13480 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 13483, end: 13484 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 13496, end: 13497 }, attributes: [] }, op: Less, right: Expr { kind: Identifier("rows"), span: Span { start: 13500, end: 13504 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 13515, end: 13518 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("row"), span: Span { start: 13519, end: 13522 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 13525, end: 13528 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Identifier("var"), span: Span { start: 13545, end: 13548 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 13549, end: 13550 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 13553, end: 13554 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 13579, end: 13580 }, attributes: [] }, op: Less, right: Expr { kind: Identifier("cols"), span: Span { start: 13583, end: 13587 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("rand_state"), span: Span { start: 13655, end: 13665 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("rand_state"), span: Span { start: 13669, end: 13679 }, attributes: [] }, op: Multiply, right: Expr { kind: Literal(Integer(1103515245)), span: Span { start: 13682, end: 13692 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(12345)), span: Span { start: 13695, end: 13700 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Modulo, right: Expr { kind: Literal(Integer(2147483647)), span: Span { start: 13704, end: 13714 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Let { name: "random", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("rand_state"), span: Span { start: 13742, end: 13752 }, attributes: [] }, op: Modulo, right: Expr { kind: Binary { left: Expr { kind: Literal(Integer(2)), span: Span { start: 13756, end: 13757 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("scale"), span: Span { start: 13760, end: 13765 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("scale"), span: Span { start: 13770, end: 13775 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("row"), span: Span { start: 13789, end: 13792 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("random"), span: Span { start: 13798, end: 13804 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 13819, end: 13820 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 13823, end: 13824 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 13827, end: 13828 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 13588, end: 13589 }, attributes: [] }, is_mutable: false }, span: Span { start: 13588, end: 13589 }, attributes: [] }]), span: Span { start: 13588, end: 13589 }, attributes: [] } }, span: Span { start: 13573, end: 13578 }, attributes: [] }, Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 13857, end: 13864 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("row"), span: Span { start: 13870, end: 13873 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 13884, end: 13885 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 13888, end: 13889 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 13892, end: 13893 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 13505, end: 13506 }, attributes: [] } }
        Return { value: Some(Expr { kind: Identifier("weights"), span: Span { start: 13917, end: 13924 }, attributes: [] }) }
        }
    }
fun l2_regularization(weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, lambda: i32) -> i32 {
    var
    Assign { target: Expr { kind: Identifier("penalty"), span: Span { start: 14179, end: 14186 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 14189, end: 14190 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 14200, end: 14201 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 14204, end: 14205 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 14222, end: 14223 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 14226, end: 14233 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 14250, end: 14253 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 14254, end: 14255 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 14258, end: 14259 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 14275, end: 14276 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 14279, end: 14286 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 14287, end: 14288 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("penalty"), span: Span { start: 14310, end: 14317 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("penalty"), span: Span { start: 14320, end: 14327 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 14331, end: 14338 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 14339, end: 14340 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 14342, end: 14343 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 14347, end: 14354 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 14355, end: 14356 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 14358, end: 14359 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 14364, end: 14369 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 14385, end: 14386 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 14389, end: 14390 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 14393, end: 14394 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 14296, end: 14297 }, attributes: [] } }, span: Span { start: 14269, end: 14274 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 14414, end: 14415 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 14418, end: 14419 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 14422, end: 14423 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 14240, end: 14241 }, attributes: [] } }
    Return { value: Some(Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("lambda"), span: Span { start: 14448, end: 14454 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("penalty"), span: Span { start: 14457, end: 14464 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 14468, end: 14473 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun dropout(activations: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, dropout_rate: i32, seed: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("masked"), span: Span { start: 14614, end: 14620 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 14623, end: 14626 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("rand_state"), span: Span { start: 14643, end: 14653 }, attributes: [] }, value: Expr { kind: Identifier("seed"), span: Span { start: 14656, end: 14660 }, attributes: [] } }
    let keep_prob = Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 14682, end: 14687 }, attributes: [] }, args: [] } - dropout_rate in {
        var
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 14719, end: 14720 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 14723, end: 14724 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 14736, end: 14737 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("activations"), span: Span { start: 14740, end: 14751 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("rand_state"), span: Span { start: 14768, end: 14778 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("rand_state"), span: Span { start: 14782, end: 14792 }, attributes: [] }, op: Multiply, right: Expr { kind: Literal(Integer(1103515245)), span: Span { start: 14795, end: 14805 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(12345)), span: Span { start: 14808, end: 14813 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Modulo, right: Expr { kind: Literal(Integer(2147483647)), span: Span { start: 14817, end: 14827 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Let { name: "random", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Identifier("rand_state"), span: Span { start: 14850, end: 14860 }, attributes: [] }, op: Modulo, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 14863, end: 14868 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("random"), span: Span { start: 14892, end: 14898 }, attributes: [] }, op: Less, right: Expr { kind: Identifier("keep_prob"), span: Span { start: 14901, end: 14910 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Let { name: "scaled", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("activations"), span: Span { start: 14990, end: 15001 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 15002, end: 15003 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 15007, end: 15012 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Identifier("keep_prob"), span: Span { start: 15018, end: 15027 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("masked"), span: Span { start: 15041, end: 15047 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("scaled"), span: Span { start: 15053, end: 15059 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: false }, span: Span { start: 14911, end: 14912 }, attributes: [] }]), span: Span { start: 14911, end: 14912 }, attributes: [] }, else_branch: Some(Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("masked"), span: Span { start: 15091, end: 15097 }, attributes: [] }, method: "push", args: [Expr { kind: Literal(Integer(0)), span: Span { start: 15103, end: 15104 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 15077, end: 15078 }, attributes: [] }) }, span: Span { start: 14889, end: 14891 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15125, end: 15126 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15129, end: 15130 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 15133, end: 15134 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 14758, end: 14759 }, attributes: [] }, is_mutable: false }, span: Span { start: 14758, end: 14759 }, attributes: [] }]), span: Span { start: 14758, end: 14759 }, attributes: [] } }
        Return { value: Some(Expr { kind: Identifier("masked"), span: Span { start: 15158, end: 15164 }, attributes: [] }) }
        }
    }
fun batch_normalize(batch: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("mean"), span: Span { start: 15365, end: 15369 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 15372, end: 15373 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15383, end: 15384 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 15387, end: 15388 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15400, end: 15401 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("batch"), span: Span { start: 15404, end: 15409 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("mean"), span: Span { start: 15426, end: 15430 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("mean"), span: Span { start: 15433, end: 15437 }, attributes: [] }, op: Add, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("batch"), span: Span { start: 15440, end: 15445 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 15446, end: 15447 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15458, end: 15459 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15462, end: 15463 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 15466, end: 15467 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 15416, end: 15417 }, attributes: [] } }
    Assign { target: Expr { kind: Identifier("mean"), span: Span { start: 15479, end: 15483 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("mean"), span: Span { start: 15486, end: 15490 }, attributes: [] }, op: Divide, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("batch"), span: Span { start: 15493, end: 15498 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("variance"), span: Span { start: 15545, end: 15553 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 15556, end: 15557 }, attributes: [] } }
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15563, end: 15564 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 15567, end: 15568 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15580, end: 15581 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("batch"), span: Span { start: 15584, end: 15589 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "diff", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("batch"), span: Span { start: 15617, end: 15622 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 15623, end: 15624 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("mean"), span: Span { start: 15628, end: 15632 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("variance"), span: Span { start: 15642, end: 15650 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("variance"), span: Span { start: 15653, end: 15661 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Identifier("diff"), span: Span { start: 15665, end: 15669 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("diff"), span: Span { start: 15672, end: 15676 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 15680, end: 15685 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15697, end: 15698 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15701, end: 15702 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 15705, end: 15706 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 15596, end: 15597 }, attributes: [] }, is_mutable: false }, span: Span { start: 15596, end: 15597 }, attributes: [] }]), span: Span { start: 15596, end: 15597 }, attributes: [] } }
    Assign { target: Expr { kind: Identifier("variance"), span: Span { start: 15718, end: 15726 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("variance"), span: Span { start: 15729, end: 15737 }, attributes: [] }, op: Divide, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("batch"), span: Span { start: 15740, end: 15745 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
    let std_dev = Call { func: Expr { kind: Identifier("sqrt_int"), span: Span { start: 15793, end: 15801 }, attributes: [] }, args: [Expr { kind: Identifier("variance"), span: Span { start: 15802, end: 15810 }, attributes: [] }] } in {
        var
        Assign { target: Expr { kind: Identifier("normalized"), span: Span { start: 15821, end: 15831 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 15834, end: 15837 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15850, end: 15851 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 15854, end: 15855 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15872, end: 15873 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("batch"), span: Span { start: 15876, end: 15881 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("std_dev"), span: Span { start: 15901, end: 15908 }, attributes: [] }, op: Greater, right: Expr { kind: Literal(Integer(0)), span: Span { start: 15911, end: 15912 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Let { name: "norm", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("batch"), span: Span { start: 15940, end: 15945 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 15946, end: 15947 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("mean"), span: Span { start: 15951, end: 15955 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 15959, end: 15964 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Identifier("std_dev"), span: Span { start: 15970, end: 15977 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("normalized"), span: Span { start: 15991, end: 16001 }, attributes: [] }, method: "push", args: [Expr { kind: Identifier("norm"), span: Span { start: 16007, end: 16011 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, is_mutable: false }, span: Span { start: 15913, end: 15914 }, attributes: [] }]), span: Span { start: 15913, end: 15914 }, attributes: [] }, else_branch: Some(Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("normalized"), span: Span { start: 16043, end: 16053 }, attributes: [] }, method: "push", args: [Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("batch"), span: Span { start: 16059, end: 16064 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 16065, end: 16066 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("mean"), span: Span { start: 16070, end: 16074 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 16029, end: 16030 }, attributes: [] }) }, span: Span { start: 15898, end: 15900 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 16095, end: 16096 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 16099, end: 16100 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 16103, end: 16104 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 15888, end: 15889 }, attributes: [] } }
        Return { value: Some(Expr { kind: Identifier("normalized"), span: Span { start: 16128, end: 16138 }, attributes: [] }) }
        }
    }
fun train_step(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, layer1_weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, layer1_biases: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, layer2_weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, layer2_biases: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, learning_rate: i32) -> i32 {
    let hidden = Call { func: Expr { kind: Identifier("layer_forward"), span: Span { start: 16610, end: 16623 }, attributes: [] }, args: [Expr { kind: Identifier("inputs"), span: Span { start: 16624, end: 16630 }, attributes: [] }, Expr { kind: Identifier("layer1_weights"), span: Span { start: 16632, end: 16646 }, attributes: [] }, Expr { kind: Identifier("layer1_biases"), span: Span { start: 16648, end: 16661 }, attributes: [] }, Expr { kind: Literal(Integer(1)), span: Span { start: 16663, end: 16664 }, attributes: [] }] } in {
        let outputs = Call { func: Expr { kind: Identifier("layer_forward"), span: Span { start: 16685, end: 16698 }, attributes: [] }, args: [Expr { kind: Identifier("hidden"), span: Span { start: 16699, end: 16705 }, attributes: [] }, Expr { kind: Identifier("layer2_weights"), span: Span { start: 16707, end: 16721 }, attributes: [] }, Expr { kind: Identifier("layer2_biases"), span: Span { start: 16723, end: 16736 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 16738, end: 16739 }, attributes: [] }] } in ()
        let loss = Call { func: Expr { kind: Identifier("mse_loss"), span: Span { start: 16782, end: 16790 }, attributes: [] }, args: [Expr { kind: Identifier("outputs"), span: Span { start: 16791, end: 16798 }, attributes: [] }, Expr { kind: Identifier("targets"), span: Span { start: 16800, end: 16807 }, attributes: [] }] } in ()
        let gradients = Call { func: Expr { kind: Identifier("backpropagation"), span: Span { start: 16856, end: 16871 }, attributes: [] }, args: [Expr { kind: Identifier("inputs"), span: Span { start: 16872, end: 16878 }, attributes: [] }, Expr { kind: Identifier("hidden"), span: Span { start: 16880, end: 16886 }, attributes: [] }, Expr { kind: Identifier("outputs"), span: Span { start: 16888, end: 16895 }, attributes: [] }, Expr { kind: Identifier("targets"), span: Span { start: 16897, end: 16904 }, attributes: [] }, Expr { kind: Identifier("layer1_weights"), span: Span { start: 16942, end: 16956 }, attributes: [] }, Expr { kind: Identifier("layer2_weights"), span: Span { start: 16958, end: 16972 }, attributes: [] }] } in ()
        Return { value: Some(Expr { kind: Identifier("loss"), span: Span { start: 17025, end: 17029 }, attributes: [] }) }
        }
    }
fun check_convergence(losses: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, threshold: i32, window: i32) -> bool {
    if MethodCall { receiver: Expr { kind: Identifier("losses"), span: Span { start: 17294, end: 17300 }, attributes: [] }, method: "len", args: [] } < window {
        Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 17333, end: 17338 }, attributes: [] }) }
        }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 17438, end: 17439 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("losses"), span: Span { start: 17442, end: 17448 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Identifier("window"), span: Span { start: 17457, end: 17463 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 17475, end: 17476 }, attributes: [] }, op: Less, right: Expr { kind: Binary { left: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("losses"), span: Span { start: 17479, end: 17485 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: Literal(Integer(1)), span: Span { start: 17494, end: 17495 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Let { name: "improvement", type_annotation: None, value: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("losses"), span: Span { start: 17524, end: 17530 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 17531, end: 17532 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Subtract, right: Expr { kind: IndexAccess { object: Expr { kind: Identifier("losses"), span: Span { start: 17536, end: 17542 }, attributes: [] }, index: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 17543, end: 17544 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 17547, end: 17548 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Identifier("improvement"), span: Span { start: 17562, end: 17573 }, attributes: [] }, op: Greater, right: Expr { kind: Identifier("threshold"), span: Span { start: 17576, end: 17585 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 17607, end: 17612 }, attributes: [] }) }, span: Span { start: 17600, end: 17606 }, attributes: [] }]), span: Span { start: 17586, end: 17587 }, attributes: [] }, else_branch: None }, span: Span { start: 17559, end: 17561 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 17632, end: 17633 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 17636, end: 17637 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 17640, end: 17641 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 17496, end: 17497 }, attributes: [] }, is_mutable: false }, span: Span { start: 17496, end: 17497 }, attributes: [] }]), span: Span { start: 17496, end: 17497 }, attributes: [] } }
    Return { value: Some(Expr { kind: Literal(Bool(true)), span: Span { start: 17665, end: 17669 }, attributes: [] }) }
    }
fun gradient_norm(gradients: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }) -> i32 {
    var
    Assign { target: Expr { kind: Identifier("sum_squared"), span: Span { start: 17789, end: 17800 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 17803, end: 17804 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 17814, end: 17815 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 17818, end: 17819 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 17836, end: 17837 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("gradients"), span: Span { start: 17840, end: 17849 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Identifier("var"), span: Span { start: 17866, end: 17869 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 17870, end: 17871 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 17874, end: 17875 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 17891, end: 17892 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 17895, end: 17904 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 17905, end: 17906 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("sum_squared"), span: Span { start: 17928, end: 17939 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("sum_squared"), span: Span { start: 17942, end: 17953 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 17957, end: 17966 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 17967, end: 17968 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 17970, end: 17971 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Multiply, right: Expr { kind: IndexAccess { object: Expr { kind: IndexAccess { object: Expr { kind: Identifier("gradients"), span: Span { start: 17975, end: 17984 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 17985, end: 17986 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, index: Expr { kind: Identifier("j"), span: Span { start: 17988, end: 17989 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Divide, right: Expr { kind: Call { func: Expr { kind: Identifier("SCALE"), span: Span { start: 17994, end: 17999 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("j"), span: Span { start: 18015, end: 18016 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("j"), span: Span { start: 18019, end: 18020 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 18023, end: 18024 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 17914, end: 17915 }, attributes: [] } }, span: Span { start: 17885, end: 17890 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 18044, end: 18045 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 18048, end: 18049 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 18052, end: 18053 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 17856, end: 17857 }, attributes: [] } }
    Return { value: Some(Expr { kind: Call { func: Expr { kind: Identifier("sqrt_int"), span: Span { start: 18077, end: 18085 }, attributes: [] }, args: [Expr { kind: Identifier("sum_squared"), span: Span { start: 18086, end: 18097 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }) }
    }
fun main() {
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18171, end: 18178 }, attributes: [] }, args: [Expr { kind: Literal(String("Deep Learning Foundations - Neural Networks with Backpropagation")), span: Span { start: 18179, end: 18245 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18252, end: 18259 }, attributes: [] }, args: [Expr { kind: Literal(String("================================================================")), span: Span { start: 18260, end: 18326 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18333, end: 18340 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 18341, end: 18343 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18350, end: 18357 }, attributes: [] }, args: [Expr { kind: Literal(String("Demonstrating Ruchy's ability to prove mathematical properties of")), span: Span { start: 18358, end: 18425 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18432, end: 18439 }, attributes: [] }, args: [Expr { kind: Literal(String("deep learning algorithms including:")), span: Span { start: 18440, end: 18477 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18484, end: 18491 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 18492, end: 18494 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18501, end: 18508 }, attributes: [] }, args: [Expr { kind: Literal(String("1. Activation Functions with Formal Properties")), span: Span { start: 18509, end: 18557 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18564, end: 18571 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Sigmoid: 0 < σ(x) < 1 for all x")), span: Span { start: 18572, end: 18611 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18618, end: 18625 }, attributes: [] }, args: [Expr { kind: Literal(String("   - ReLU: max(0, x) with linear positive region")), span: Span { start: 18626, end: 18676 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18683, end: 18690 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Tanh: -1 < tanh(x) < 1 for all x")), span: Span { start: 18691, end: 18730 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18737, end: 18744 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 18745, end: 18747 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18754, end: 18761 }, attributes: [] }, args: [Expr { kind: Literal(String("2. Loss Functions with Convexity Guarantees")), span: Span { start: 18762, end: 18807 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18814, end: 18821 }, attributes: [] }, args: [Expr { kind: Literal(String("   - MSE: Strictly convex with global minimum")), span: Span { start: 18822, end: 18869 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18876, end: 18883 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Cross-entropy: Convex for logistic regression")), span: Span { start: 18884, end: 18936 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18943, end: 18950 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 18951, end: 18953 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 18960, end: 18967 }, attributes: [] }, args: [Expr { kind: Literal(String("3. Backpropagation with Gradient Correctness")), span: Span { start: 18968, end: 19014 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19021, end: 19028 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Chain rule application verified")), span: Span { start: 19029, end: 19067 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19074, end: 19081 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Gradient computation mathematically proven")), span: Span { start: 19082, end: 19131 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19138, end: 19145 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 19146, end: 19148 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19155, end: 19162 }, attributes: [] }, args: [Expr { kind: Literal(String("4. Optimization with Convergence Guarantees")), span: Span { start: 19163, end: 19208 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19215, end: 19222 }, attributes: [] }, args: [Expr { kind: Literal(String("   - SGD convergence for convex functions")), span: Span { start: 19223, end: 19266 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19273, end: 19280 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Adam optimizer with adaptive learning rates")), span: Span { start: 19281, end: 19331 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19338, end: 19345 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 19346, end: 19348 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19355, end: 19362 }, attributes: [] }, args: [Expr { kind: Literal(String("5. Regularization for Generalization")), span: Span { start: 19363, end: 19401 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19408, end: 19415 }, attributes: [] }, args: [Expr { kind: Literal(String("   - L2 penalty for weight decay")), span: Span { start: 19416, end: 19450 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19457, end: 19464 }, attributes: [] }, args: [Expr { kind: Literal(String("   - Dropout for preventing overfitting")), span: Span { start: 19465, end: 19506 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19513, end: 19520 }, attributes: [] }, args: [Expr { kind: Literal(String("")), span: Span { start: 19521, end: 19523 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19530, end: 19537 }, attributes: [] }, args: [Expr { kind: Literal(String("Run verification with: ruchy provability deep_learning.ruchy")), span: Span { start: 19538, end: 19600 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19607, end: 19614 }, attributes: [] }, args: [Expr { kind: Literal(String("Run complexity analysis with: ruchy runtime deep_learning.ruchy")), span: Span { start: 19615, end: 19680 }, attributes: [] }] }
    Call { func: Expr { kind: Identifier("println"), span: Span { start: 19687, end: 19694 }, attributes: [] }, args: [Expr { kind: Literal(String("Run formal proofs with: ruchy prove deep_learning.ruchy")), span: Span { start: 19695, end: 19752 }, attributes: [] }] }
    }
}