{
Import { path: "std::vec::Vec", items: [Named("Vec")] }
fun test_perceptron_forward() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 1: Perceptron Forward Pass")), span: Span { start: 318, end: 351 }, attributes: [] }] }
    let inputs = Macro { name: "vec", args: [Expr { kind: Literal(Integer(10)), span: Span { start: 414, end: 416 }, attributes: [] }, Expr { kind: Literal(Integer(20)), span: Span { start: 418, end: 420 }, attributes: [] }] } in {
        let weights = Macro { name: "vec", args: [Expr { kind: Literal(Integer(15)), span: Span { start: 486, end: 488 }, attributes: [] }, Expr { kind: Literal(Integer(25)), span: Span { start: 490, end: 492 }, attributes: [] }] } in ()
        let bias = 5 in ()
        let output = Call { func: Expr { kind: Identifier("perceptron_forward"), span: Span { start: 570, end: 588 }, attributes: [] }, args: [Expr { kind: Identifier("inputs"), span: Span { start: 589, end: 595 }, attributes: [] }, Expr { kind: Identifier("weights"), span: Span { start: 597, end: 604 }, attributes: [] }, Expr { kind: Identifier("bias"), span: Span { start: 606, end: 610 }, attributes: [] }] } in ()
        if output == 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Perceptron should produce output")), span: Span { start: 715, end: 755 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 773, end: 778 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Perceptron forward pass")), span: Span { start: 804, end: 835 }, attributes: [] }] }
        true
        }
    }
fun test_sigmoid_activation() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 2: Sigmoid Activation Function")), span: Span { start: 942, end: 979 }, attributes: [] }] }
    let sig_0 = Call { func: Expr { kind: Identifier("sigmoid_activation"), span: Span { start: 1041, end: 1059 }, attributes: [] }, args: [Expr { kind: Literal(Integer(0)), span: Span { start: 1060, end: 1061 }, attributes: [] }] } in {
        let sig_pos = Call { func: Expr { kind: Identifier("sigmoid_activation"), span: Span { start: 1082, end: 1100 }, attributes: [] }, args: [Expr { kind: Literal(Integer(100)), span: Span { start: 1101, end: 1104 }, attributes: [] }] } in ()
        let sig_neg = Call { func: Expr { kind: Identifier("sigmoid_activation"), span: Span { start: 1144, end: 1162 }, attributes: [] }, args: [Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(100)), span: Span { start: 1164, end: 1167 }, attributes: [] } }, span: Span { start: 1163, end: 1164 }, attributes: [] }] } in ()
        if sig_0 < 45 || sig_0 > 55 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Sigmoid(0) should be approximately 50")), span: Span { start: 1293, end: 1338 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 1356, end: 1361 }, attributes: [] }) }
            }
        if sig_pos < 95 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Sigmoid(large) should approach 100")), span: Span { start: 1482, end: 1524 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 1542, end: 1547 }, attributes: [] }) }
            }
        if sig_neg > 5 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Sigmoid(-large) should approach 0")), span: Span { start: 1649, end: 1690 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 1708, end: 1713 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Sigmoid activation function")), span: Span { start: 1739, end: 1774 }, attributes: [] }] }
        true
        }
    }
fun test_relu_activation() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 3: ReLU Activation Function")), span: Span { start: 1875, end: 1909 }, attributes: [] }] }
    let relu_pos = Call { func: Expr { kind: Identifier("relu_activation"), span: Span { start: 1936, end: 1951 }, attributes: [] }, args: [Expr { kind: Literal(Integer(50)), span: Span { start: 1952, end: 1954 }, attributes: [] }] } in {
        let relu_neg = Call { func: Expr { kind: Identifier("relu_activation"), span: Span { start: 1976, end: 1991 }, attributes: [] }, args: [Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(30)), span: Span { start: 1993, end: 1995 }, attributes: [] } }, span: Span { start: 1992, end: 1993 }, attributes: [] }] } in ()
        let relu_zero = Call { func: Expr { kind: Identifier("relu_activation"), span: Span { start: 2018, end: 2033 }, attributes: [] }, args: [Expr { kind: Literal(Integer(0)), span: Span { start: 2034, end: 2035 }, attributes: [] }] } in ()
        if relu_pos != 50 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: ReLU(positive) should return input")), span: Span { start: 2117, end: 2159 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 2177, end: 2182 }, attributes: [] }) }
            }
        if relu_neg != 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: ReLU(negative) should return 0")), span: Span { start: 2261, end: 2299 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 2317, end: 2322 }, attributes: [] }) }
            }
        if relu_zero != 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: ReLU(0) should return 0")), span: Span { start: 2395, end: 2426 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 2444, end: 2449 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: ReLU activation function")), span: Span { start: 2475, end: 2507 }, attributes: [] }] }
        true
        }
    }
fun test_neural_network_forward() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 4: Neural Network Forward Pass")), span: Span { start: 2628, end: 2665 }, attributes: [] }] }
    let inputs = Macro { name: "vec", args: [Expr { kind: Literal(Integer(10)), span: Span { start: 2747, end: 2749 }, attributes: [] }, Expr { kind: Literal(Integer(20)), span: Span { start: 2751, end: 2753 }, attributes: [] }] } in {
        let weights_hidden = Macro { name: "vec", args: [Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(10)), span: Span { start: 2856, end: 2858 }, attributes: [] }, Expr { kind: Literal(Integer(15)), span: Span { start: 2860, end: 2862 }, attributes: [] }, Expr { kind: Literal(Integer(20)), span: Span { start: 2864, end: 2866 }, attributes: [] }] }, span: Span { start: 2851, end: 2854 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(25)), span: Span { start: 2906, end: 2908 }, attributes: [] }, Expr { kind: Literal(Integer(30)), span: Span { start: 2910, end: 2912 }, attributes: [] }, Expr { kind: Literal(Integer(35)), span: Span { start: 2914, end: 2916 }, attributes: [] }] }, span: Span { start: 2901, end: 2904 }, attributes: [] }] } in ()
        let bias_hidden = Macro { name: "vec", args: [Expr { kind: Literal(Integer(5)), span: Span { start: 2977, end: 2978 }, attributes: [] }, Expr { kind: Literal(Integer(10)), span: Span { start: 2980, end: 2982 }, attributes: [] }, Expr { kind: Literal(Integer(15)), span: Span { start: 2984, end: 2986 }, attributes: [] }] } in ()
        let weights_output = Macro { name: "vec", args: [Expr { kind: Literal(Integer(40)), span: Span { start: 3065, end: 3067 }, attributes: [] }, Expr { kind: Literal(Integer(45)), span: Span { start: 3069, end: 3071 }, attributes: [] }, Expr { kind: Literal(Integer(50)), span: Span { start: 3073, end: 3075 }, attributes: [] }] } in ()
        let bias_output = 20 in ()
        let output = Call { func: Expr { kind: Identifier("neural_network_forward"), span: Span { start: 3126, end: 3148 }, attributes: [] }, args: [Expr { kind: Identifier("inputs"), span: Span { start: 3149, end: 3155 }, attributes: [] }, Expr { kind: Identifier("weights_hidden"), span: Span { start: 3157, end: 3171 }, attributes: [] }, Expr { kind: Identifier("bias_hidden"), span: Span { start: 3173, end: 3184 }, attributes: [] }, Expr { kind: Identifier("weights_output"), span: Span { start: 3226, end: 3240 }, attributes: [] }, Expr { kind: Identifier("bias_output"), span: Span { start: 3242, end: 3253 }, attributes: [] }] } in ()
        if output == 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Neural network should produce output")), span: Span { start: 3299, end: 3343 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 3361, end: 3366 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Neural network forward pass")), span: Span { start: 3392, end: 3427 }, attributes: [] }] }
        true
        }
    }
fun test_mse_loss() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 5: Mean Squared Error Loss")), span: Span { start: 3520, end: 3553 }, attributes: [] }] }
    let predictions = Macro { name: "vec", args: [Expr { kind: Literal(Integer(30)), span: Span { start: 3588, end: 3590 }, attributes: [] }, Expr { kind: Literal(Integer(50)), span: Span { start: 3592, end: 3594 }, attributes: [] }, Expr { kind: Literal(Integer(70)), span: Span { start: 3596, end: 3598 }, attributes: [] }] } in {
        let targets = Macro { name: "vec", args: [Expr { kind: Literal(Integer(35)), span: Span { start: 3624, end: 3626 }, attributes: [] }, Expr { kind: Literal(Integer(45)), span: Span { start: 3628, end: 3630 }, attributes: [] }, Expr { kind: Literal(Integer(75)), span: Span { start: 3632, end: 3634 }, attributes: [] }] } in ()
        let loss = Call { func: Expr { kind: Identifier("calculate_mse_loss"), span: Span { start: 3657, end: 3675 }, attributes: [] }, args: [Expr { kind: Identifier("predictions"), span: Span { start: 3676, end: 3687 }, attributes: [] }, Expr { kind: Identifier("targets"), span: Span { start: 3689, end: 3696 }, attributes: [] }] } in ()
        if loss == 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: MSE loss should be non-zero for different values")), span: Span { start: 3776, end: 3832 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 3850, end: 3855 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Mean squared error loss")), span: Span { start: 3881, end: 3912 }, attributes: [] }] }
        true
        }
    }
fun test_cross_entropy_loss() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 6: Cross-Entropy Loss")), span: Span { start: 4010, end: 4038 }, attributes: [] }] }
    let predictions = Macro { name: "vec", args: [Expr { kind: Literal(Integer(80)), span: Span { start: 4131, end: 4133 }, attributes: [] }, Expr { kind: Literal(Integer(30)), span: Span { start: 4135, end: 4137 }, attributes: [] }, Expr { kind: Literal(Integer(90)), span: Span { start: 4139, end: 4141 }, attributes: [] }] } in {
        let targets = Macro { name: "vec", args: [Expr { kind: Literal(Integer(1)), span: Span { start: 4185, end: 4186 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 4188, end: 4189 }, attributes: [] }, Expr { kind: Literal(Integer(1)), span: Span { start: 4191, end: 4192 }, attributes: [] }] } in ()
        let loss = Call { func: Expr { kind: Identifier("calculate_cross_entropy_loss"), span: Span { start: 4231, end: 4259 }, attributes: [] }, args: [Expr { kind: Identifier("predictions"), span: Span { start: 4260, end: 4271 }, attributes: [] }, Expr { kind: Identifier("targets"), span: Span { start: 4273, end: 4280 }, attributes: [] }] } in ()
        if loss == 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Cross-entropy loss should be non-zero")), span: Span { start: 4324, end: 4369 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 4387, end: 4392 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Cross-entropy loss")), span: Span { start: 4418, end: 4444 }, attributes: [] }] }
        true
        }
    }
fun test_gradient_computation() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 7: Gradient Computation")), span: Span { start: 4564, end: 4594 }, attributes: [] }] }
    let output = 70 in {
        let target = 100 in ()
        let input = 20 in ()
        let gradient = Call { func: Expr { kind: Identifier("compute_gradient_mse"), span: Span { start: 4800, end: 4820 }, attributes: [] }, args: [Expr { kind: Identifier("output"), span: Span { start: 4821, end: 4827 }, attributes: [] }, Expr { kind: Identifier("target"), span: Span { start: 4829, end: 4835 }, attributes: [] }, Expr { kind: Identifier("input"), span: Span { start: 4837, end: 4842 }, attributes: [] }] } in ()
        if gradient >= 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Gradient should be negative when output < target")), span: Span { start: 4951, end: 5007 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 5025, end: 5030 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Gradient computation")), span: Span { start: 5056, end: 5084 }, attributes: [] }] }
        true
        }
    }
fun test_backpropagation_layer() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 8: Backpropagation Through Layer")), span: Span { start: 5200, end: 5239 }, attributes: [] }] }
    let layer_output = Macro { name: "vec", args: [Expr { kind: Literal(Integer(50)), span: Span { start: 5275, end: 5277 }, attributes: [] }, Expr { kind: Literal(Integer(60)), span: Span { start: 5279, end: 5281 }, attributes: [] }, Expr { kind: Literal(Integer(70)), span: Span { start: 5283, end: 5285 }, attributes: [] }] } in {
        let output_gradients = Macro { name: "vec", args: [Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(10)), span: Span { start: 5321, end: 5323 }, attributes: [] } }, span: Span { start: 5320, end: 5321 }, attributes: [] }, Expr { kind: Literal(Integer(5)), span: Span { start: 5325, end: 5326 }, attributes: [] }, Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(15)), span: Span { start: 5329, end: 5331 }, attributes: [] } }, span: Span { start: 5328, end: 5329 }, attributes: [] }] } in ()
        let weights = Macro { name: "vec", args: [Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(20)), span: Span { start: 5401, end: 5403 }, attributes: [] }, Expr { kind: Literal(Integer(30)), span: Span { start: 5405, end: 5407 }, attributes: [] }, Expr { kind: Literal(Integer(40)), span: Span { start: 5409, end: 5411 }, attributes: [] }] }, span: Span { start: 5396, end: 5399 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(25)), span: Span { start: 5427, end: 5429 }, attributes: [] }, Expr { kind: Literal(Integer(35)), span: Span { start: 5431, end: 5433 }, attributes: [] }, Expr { kind: Literal(Integer(45)), span: Span { start: 5435, end: 5437 }, attributes: [] }] }, span: Span { start: 5422, end: 5425 }, attributes: [] }] } in ()
        let input_gradients = Call { func: Expr { kind: Identifier("backpropagate_layer"), span: Span { start: 5477, end: 5496 }, attributes: [] }, args: [Expr { kind: Identifier("output_gradients"), span: Span { start: 5497, end: 5513 }, attributes: [] }, Expr { kind: Identifier("weights"), span: Span { start: 5515, end: 5522 }, attributes: [] }] } in ()
        if MethodCall { receiver: Expr { kind: Identifier("input_gradients"), span: Span { start: 5537, end: 5552 }, attributes: [] }, method: "len", args: [] } != 2 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Backpropagation should return gradients for each input")), span: Span { start: 5583, end: 5645 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 5663, end: 5668 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Backpropagation through layer")), span: Span { start: 5694, end: 5731 }, attributes: [] }] }
        true
        }
    }
fun test_weight_update() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 9: Weight Update")), span: Span { start: 5838, end: 5861 }, attributes: [] }] }
    var
    Assign { target: Expr { kind: Identifier("weights"), span: Span { start: 5877, end: 5884 }, attributes: [] }, value: Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(100)), span: Span { start: 5892, end: 5895 }, attributes: [] }, Expr { kind: Literal(Integer(200)), span: Span { start: 5897, end: 5900 }, attributes: [] }, Expr { kind: Literal(Integer(300)), span: Span { start: 5902, end: 5905 }, attributes: [] }] }, span: Span { start: 5887, end: 5890 }, attributes: [] } }
    let gradients = Macro { name: "vec", args: [Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(10)), span: Span { start: 5954, end: 5956 }, attributes: [] } }, span: Span { start: 5953, end: 5954 }, attributes: [] }, Expr { kind: Literal(Integer(20)), span: Span { start: 5958, end: 5960 }, attributes: [] }, Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(30)), span: Span { start: 5963, end: 5965 }, attributes: [] } }, span: Span { start: 5962, end: 5963 }, attributes: [] }] } in {
        let learning_rate = 10 in ()
        Assign { target: Expr { kind: Identifier("weights"), span: Span { start: 6027, end: 6034 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: Identifier("update_weights"), span: Span { start: 6037, end: 6051 }, attributes: [] }, args: [Expr { kind: Identifier("weights"), span: Span { start: 6052, end: 6059 }, attributes: [] }, Expr { kind: Identifier("gradients"), span: Span { start: 6061, end: 6070 }, attributes: [] }, Expr { kind: Identifier("learning_rate"), span: Span { start: 6072, end: 6085 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] } }
        if IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 6192, end: 6199 }, attributes: [] }, index: Expr { kind: Literal(Integer(0)), span: Span { start: 6200, end: 6201 }, attributes: [] } } <= 100 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Weight should increase with negative gradient")), span: Span { start: 6229, end: 6282 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 6300, end: 6305 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Weight update")), span: Span { start: 6331, end: 6352 }, attributes: [] }] }
        true
        }
    }
fun test_mini_batch_sgd() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 10: Mini-Batch SGD")), span: Span { start: 6456, end: 6481 }, attributes: [] }] }
    let batch_inputs = Macro { name: "vec", args: [Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(10)), span: Span { start: 6531, end: 6533 }, attributes: [] }, Expr { kind: Literal(Integer(20)), span: Span { start: 6535, end: 6537 }, attributes: [] }] }, span: Span { start: 6526, end: 6529 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(15)), span: Span { start: 6553, end: 6555 }, attributes: [] }, Expr { kind: Literal(Integer(25)), span: Span { start: 6557, end: 6559 }, attributes: [] }] }, span: Span { start: 6548, end: 6551 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(20)), span: Span { start: 6575, end: 6577 }, attributes: [] }, Expr { kind: Literal(Integer(30)), span: Span { start: 6579, end: 6581 }, attributes: [] }] }, span: Span { start: 6570, end: 6573 }, attributes: [] }] } in {
        let batch_targets = Macro { name: "vec", args: [Expr { kind: Literal(Integer(50)), span: Span { start: 6619, end: 6621 }, attributes: [] }, Expr { kind: Literal(Integer(60)), span: Span { start: 6623, end: 6625 }, attributes: [] }, Expr { kind: Literal(Integer(70)), span: Span { start: 6627, end: 6629 }, attributes: [] }] } in ()
        let initial_weights = Macro { name: "vec", args: [Expr { kind: Literal(Integer(100)), span: Span { start: 6663, end: 6666 }, attributes: [] }, Expr { kind: Literal(Integer(150)), span: Span { start: 6668, end: 6671 }, attributes: [] }] } in ()
        let learning_rate = 5 in ()
        let epochs = 2 in ()
        let final_weights = Call { func: Expr { kind: Identifier("train_mini_batch_sgd"), span: Span { start: 6750, end: 6770 }, attributes: [] }, args: [Expr { kind: Identifier("batch_inputs"), span: Span { start: 6771, end: 6783 }, attributes: [] }, Expr { kind: Identifier("batch_targets"), span: Span { start: 6785, end: 6798 }, attributes: [] }, Expr { kind: Identifier("initial_weights"), span: Span { start: 6845, end: 6860 }, attributes: [] }, Expr { kind: Identifier("learning_rate"), span: Span { start: 6862, end: 6875 }, attributes: [] }, Expr { kind: Identifier("epochs"), span: Span { start: 6877, end: 6883 }, attributes: [] }] } in ()
        if MethodCall { receiver: Expr { kind: Identifier("final_weights"), span: Span { start: 6898, end: 6911 }, attributes: [] }, method: "len", args: [] } != 2 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: SGD should return updated weights")), span: Span { start: 6942, end: 6983 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 7001, end: 7006 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Mini-batch SGD")), span: Span { start: 7032, end: 7054 }, attributes: [] }] }
        true
        }
    }
fun test_gradient_clipping() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 11: Gradient Clipping")), span: Span { start: 7151, end: 7179 }, attributes: [] }] }
    let gradients = Macro { name: "vec", args: [Expr { kind: Literal(Integer(150)), span: Span { start: 7212, end: 7215 }, attributes: [] }, Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(200)), span: Span { start: 7218, end: 7221 }, attributes: [] } }, span: Span { start: 7217, end: 7218 }, attributes: [] }, Expr { kind: Literal(Integer(50)), span: Span { start: 7223, end: 7225 }, attributes: [] }] } in {
        let clip_value = 100 in ()
        let clipped = Call { func: Expr { kind: Identifier("clip_gradients"), span: Span { start: 7297, end: 7311 }, attributes: [] }, args: [Expr { kind: Identifier("gradients"), span: Span { start: 7312, end: 7321 }, attributes: [] }, Expr { kind: Identifier("clip_value"), span: Span { start: 7323, end: 7333 }, attributes: [] }] } in ()
        var
        Assign { target: Expr { kind: Identifier("all_clipped"), span: Span { start: 7399, end: 7410 }, attributes: [] }, value: Expr { kind: Literal(Bool(true)), span: Span { start: 7413, end: 7417 }, attributes: [] } }
        var
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 7427, end: 7428 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 7431, end: 7432 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 7444, end: 7445 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("clipped"), span: Span { start: 7448, end: 7455 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("clipped"), span: Span { start: 7475, end: 7482 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 7483, end: 7484 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Greater, right: Expr { kind: Identifier("clip_value"), span: Span { start: 7488, end: 7498 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Or, right: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("clipped"), span: Span { start: 7502, end: 7509 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 7510, end: 7511 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Less, right: Expr { kind: Unary { op: Negate, operand: Expr { kind: Identifier("clip_value"), span: Span { start: 7516, end: 7526 }, attributes: [] } }, span: Span { start: 7515, end: 7516 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("all_clipped"), span: Span { start: 7541, end: 7552 }, attributes: [] }, value: Expr { kind: Literal(Bool(false)), span: Span { start: 7555, end: 7560 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 7527, end: 7528 }, attributes: [] }, else_branch: None }, span: Span { start: 7472, end: 7474 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 7580, end: 7581 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 7584, end: 7585 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 7588, end: 7589 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 7462, end: 7463 }, attributes: [] } }
        if Unary { op: Not, operand: Expr { kind: Identifier("all_clipped"), span: Span { start: 7610, end: 7621 }, attributes: [] } } {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Gradients should be clipped to threshold")), span: Span { start: 7641, end: 7689 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 7707, end: 7712 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Gradient clipping")), span: Span { start: 7738, end: 7763 }, attributes: [] }] }
        true
        }
    }
fun test_xavier_initialization() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 12: Xavier Weight Initialization")), span: Span { start: 7875, end: 7914 }, attributes: [] }] }
    let fan_in = 10 in {
        let fan_out = 5 in ()
        let weights = Call { func: Expr { kind: Identifier("xavier_initialize"), span: Span { start: 7987, end: 8004 }, attributes: [] }, args: [Expr { kind: Identifier("fan_in"), span: Span { start: 8005, end: 8011 }, attributes: [] }, Expr { kind: Identifier("fan_out"), span: Span { start: 8013, end: 8020 }, attributes: [] }] } in ()
        if MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 8035, end: 8042 }, attributes: [] }, method: "len", args: [] } != fan_in * fan_out {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Xavier initialization should create fan_in * fan_out weights")), span: Span { start: 8088, end: 8156 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 8174, end: 8179 }, attributes: [] }) }
            }
        var
        Assign { target: Expr { kind: Identifier("non_zero"), span: Span { start: 8243, end: 8251 }, attributes: [] }, value: Expr { kind: Literal(Bool(false)), span: Span { start: 8254, end: 8259 }, attributes: [] } }
        var
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8269, end: 8270 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 8273, end: 8274 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8286, end: 8287 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 8290, end: 8297 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("weights"), span: Span { start: 8317, end: 8324 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 8325, end: 8326 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: NotEqual, right: Expr { kind: Literal(Integer(0)), span: Span { start: 8331, end: 8332 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("non_zero"), span: Span { start: 8347, end: 8355 }, attributes: [] }, value: Expr { kind: Literal(Bool(true)), span: Span { start: 8358, end: 8362 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8333, end: 8334 }, attributes: [] }, else_branch: None }, span: Span { start: 8314, end: 8316 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 8382, end: 8383 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 8386, end: 8387 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 8390, end: 8391 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 8304, end: 8305 }, attributes: [] } }
        if Unary { op: Not, operand: Expr { kind: Identifier("non_zero"), span: Span { start: 8412, end: 8420 }, attributes: [] } } {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Xavier weights should not all be zero")), span: Span { start: 8440, end: 8485 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 8503, end: 8508 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Xavier weight initialization")), span: Span { start: 8534, end: 8570 }, attributes: [] }] }
        true
        }
    }
fun test_dropout_regularization() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 13: Dropout Regularization")), span: Span { start: 8677, end: 8710 }, attributes: [] }] }
    let activations = Macro { name: "vec", args: [Expr { kind: Literal(Integer(100)), span: Span { start: 8745, end: 8748 }, attributes: [] }, Expr { kind: Literal(Integer(200)), span: Span { start: 8750, end: 8753 }, attributes: [] }, Expr { kind: Literal(Integer(300)), span: Span { start: 8755, end: 8758 }, attributes: [] }, Expr { kind: Literal(Integer(400)), span: Span { start: 8760, end: 8763 }, attributes: [] }, Expr { kind: Literal(Integer(500)), span: Span { start: 8765, end: 8768 }, attributes: [] }] } in {
        let dropout_rate = 50 in ()
        let seed = 42 in ()
        let dropped = Call { func: Expr { kind: Identifier("apply_dropout"), span: Span { start: 8856, end: 8869 }, attributes: [] }, args: [Expr { kind: Identifier("activations"), span: Span { start: 8870, end: 8881 }, attributes: [] }, Expr { kind: Identifier("dropout_rate"), span: Span { start: 8883, end: 8895 }, attributes: [] }, Expr { kind: Identifier("seed"), span: Span { start: 8897, end: 8901 }, attributes: [] }] } in ()
        var
        Assign { target: Expr { kind: Identifier("has_zeros"), span: Span { start: 8958, end: 8967 }, attributes: [] }, value: Expr { kind: Literal(Bool(false)), span: Span { start: 8970, end: 8975 }, attributes: [] } }
        var
        Assign { target: Expr { kind: Identifier("has_non_zeros"), span: Span { start: 8985, end: 8998 }, attributes: [] }, value: Expr { kind: Literal(Bool(false)), span: Span { start: 9001, end: 9006 }, attributes: [] } }
        var
        Assign { target: Expr { kind: Identifier("i"), span: Span { start: 9016, end: 9017 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 9020, end: 9021 }, attributes: [] } }
        While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 9033, end: 9034 }, attributes: [] }, op: Less, right: Expr { kind: MethodCall { receiver: Expr { kind: Identifier("dropped"), span: Span { start: 9037, end: 9044 }, attributes: [] }, method: "len", args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: If { condition: Expr { kind: Binary { left: Expr { kind: IndexAccess { object: Expr { kind: Identifier("dropped"), span: Span { start: 9064, end: 9071 }, attributes: [] }, index: Expr { kind: Identifier("i"), span: Span { start: 9072, end: 9073 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, op: Equal, right: Expr { kind: Literal(Integer(0)), span: Span { start: 9078, end: 9079 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, then_branch: Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("has_zeros"), span: Span { start: 9094, end: 9103 }, attributes: [] }, value: Expr { kind: Literal(Bool(true)), span: Span { start: 9106, end: 9110 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 9080, end: 9081 }, attributes: [] }, else_branch: Some(Expr { kind: Block([Expr { kind: Assign { target: Expr { kind: Identifier("has_non_zeros"), span: Span { start: 9141, end: 9154 }, attributes: [] }, value: Expr { kind: Literal(Bool(true)), span: Span { start: 9157, end: 9161 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 9127, end: 9128 }, attributes: [] }) }, span: Span { start: 9061, end: 9063 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 9181, end: 9182 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 9185, end: 9186 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 9189, end: 9190 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 9051, end: 9052 }, attributes: [] } }
        if Unary { op: Not, operand: Expr { kind: Identifier("has_zeros"), span: Span { start: 9211, end: 9220 }, attributes: [] } } || Unary { op: Not, operand: Expr { kind: Identifier("has_non_zeros"), span: Span { start: 9225, end: 9238 }, attributes: [] } } {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Dropout should zero some but not all activations")), span: Span { start: 9258, end: 9314 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 9332, end: 9337 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Dropout regularization")), span: Span { start: 9363, end: 9393 }, attributes: [] }] }
        true
        }
    }
fun test_learning_rate_decay() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 14: Learning Rate Decay")), span: Span { start: 9494, end: 9524 }, attributes: [] }] }
    let initial_lr = 100 in {
        let decay_rate = 90 in ()
        let epoch = 5 in ()
        let decayed_lr = Call { func: Expr { kind: Identifier("decay_learning_rate"), span: Span { start: 9659, end: 9678 }, attributes: [] }, args: [Expr { kind: Identifier("initial_lr"), span: Span { start: 9679, end: 9689 }, attributes: [] }, Expr { kind: Identifier("decay_rate"), span: Span { start: 9691, end: 9701 }, attributes: [] }, Expr { kind: Identifier("epoch"), span: Span { start: 9703, end: 9708 }, attributes: [] }] } in ()
        if decayed_lr >= initial_lr {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Learning rate should decay over time")), span: Span { start: 9805, end: 9849 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 9867, end: 9872 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Learning rate decay")), span: Span { start: 9898, end: 9925 }, attributes: [] }] }
        true
        }
    }
fun test_training_pipeline() -> bool {
    Macro { name: "println", args: [Expr { kind: Literal(String("Test 15: Full Training Pipeline")), span: Span { start: 10027, end: 10060 }, attributes: [] }] }
    let training_inputs = Macro { name: "vec", args: [Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(0)), span: Span { start: 10157, end: 10158 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 10160, end: 10161 }, attributes: [] }] }, span: Span { start: 10152, end: 10155 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(0)), span: Span { start: 10177, end: 10178 }, attributes: [] }, Expr { kind: Literal(Integer(100)), span: Span { start: 10180, end: 10183 }, attributes: [] }] }, span: Span { start: 10172, end: 10175 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(100)), span: Span { start: 10199, end: 10202 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 10204, end: 10205 }, attributes: [] }] }, span: Span { start: 10194, end: 10197 }, attributes: [] }, Expr { kind: Macro { name: "vec", args: [Expr { kind: Literal(Integer(100)), span: Span { start: 10221, end: 10224 }, attributes: [] }, Expr { kind: Literal(Integer(100)), span: Span { start: 10226, end: 10229 }, attributes: [] }] }, span: Span { start: 10216, end: 10219 }, attributes: [] }] } in {
        let training_targets = Macro { name: "vec", args: [Expr { kind: Literal(Integer(0)), span: Span { start: 10270, end: 10271 }, attributes: [] }, Expr { kind: Literal(Integer(100)), span: Span { start: 10273, end: 10276 }, attributes: [] }, Expr { kind: Literal(Integer(100)), span: Span { start: 10278, end: 10281 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 10283, end: 10284 }, attributes: [] }] } in ()
        let epochs = 10 in ()
        let learning_rate = 10 in ()
        let trained_model = Call { func: Expr { kind: Identifier("train_neural_network"), span: Span { start: 10386, end: 10406 }, attributes: [] }, args: [Expr { kind: Identifier("training_inputs"), span: Span { start: 10407, end: 10422 }, attributes: [] }, Expr { kind: Identifier("training_targets"), span: Span { start: 10424, end: 10440 }, attributes: [] }, Expr { kind: Identifier("epochs"), span: Span { start: 10486, end: 10492 }, attributes: [] }, Expr { kind: Identifier("learning_rate"), span: Span { start: 10494, end: 10507 }, attributes: [] }] } in ()
        if MethodCall { receiver: Expr { kind: Identifier("trained_model"), span: Span { start: 10522, end: 10535 }, attributes: [] }, method: "len", args: [] } == 0 {
            Macro { name: "println", args: [Expr { kind: Literal(String("FAIL: Training should produce a model")), span: Span { start: 10566, end: 10605 }, attributes: [] }] }
            Return { value: Some(Expr { kind: Literal(Bool(false)), span: Span { start: 10623, end: 10628 }, attributes: [] }) }
            }
        Macro { name: "println", args: [Expr { kind: Literal(String("PASS: Full training pipeline")), span: Span { start: 10654, end: 10684 }, attributes: [] }] }
        true
        }
    }
fun main() {
    Macro { name: "println", args: [Expr { kind: Literal(String("Running Deep Learning Foundation Tests (TDD)")), span: Span { start: 10745, end: 10791 }, attributes: [] }] }
    Macro { name: "println", args: [Expr { kind: Literal(String("============================================")), span: Span { start: 10807, end: 10853 }, attributes: [] }] }
    var
    Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 10869, end: 10881 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 10884, end: 10885 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 10895, end: 10907 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 10910, end: 10911 }, attributes: [] } }
    if Call { func: Expr { kind: Identifier("test_perceptron_forward"), span: Span { start: 10925, end: 10948 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 10961, end: 10973 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 10976, end: 10988 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 10991, end: 10992 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11015, end: 11027 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11030, end: 11042 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11045, end: 11046 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_sigmoid_activation"), span: Span { start: 11066, end: 11089 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11102, end: 11114 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11117, end: 11129 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11132, end: 11133 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11156, end: 11168 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11171, end: 11183 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11186, end: 11187 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_relu_activation"), span: Span { start: 11207, end: 11227 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11240, end: 11252 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11255, end: 11267 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11270, end: 11271 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11294, end: 11306 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11309, end: 11321 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11324, end: 11325 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_neural_network_forward"), span: Span { start: 11345, end: 11372 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11385, end: 11397 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11400, end: 11412 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11415, end: 11416 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11439, end: 11451 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11454, end: 11466 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11469, end: 11470 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_mse_loss"), span: Span { start: 11490, end: 11503 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11516, end: 11528 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11531, end: 11543 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11546, end: 11547 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11570, end: 11582 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11585, end: 11597 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11600, end: 11601 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_cross_entropy_loss"), span: Span { start: 11621, end: 11644 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11657, end: 11669 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11672, end: 11684 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11687, end: 11688 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11711, end: 11723 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11726, end: 11738 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11741, end: 11742 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_gradient_computation"), span: Span { start: 11762, end: 11787 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11800, end: 11812 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11815, end: 11827 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11830, end: 11831 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11854, end: 11866 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 11869, end: 11881 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11884, end: 11885 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_backpropagation_layer"), span: Span { start: 11905, end: 11931 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 11944, end: 11956 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 11959, end: 11971 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 11974, end: 11975 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 11998, end: 12010 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12013, end: 12025 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12028, end: 12029 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_weight_update"), span: Span { start: 12049, end: 12067 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12080, end: 12092 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12095, end: 12107 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12110, end: 12111 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12134, end: 12146 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12149, end: 12161 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12164, end: 12165 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_mini_batch_sgd"), span: Span { start: 12185, end: 12204 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12217, end: 12229 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12232, end: 12244 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12247, end: 12248 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12271, end: 12283 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12286, end: 12298 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12301, end: 12302 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_gradient_clipping"), span: Span { start: 12322, end: 12344 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12357, end: 12369 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12372, end: 12384 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12387, end: 12388 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12411, end: 12423 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12426, end: 12438 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12441, end: 12442 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_xavier_initialization"), span: Span { start: 12462, end: 12488 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12501, end: 12513 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12516, end: 12528 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12531, end: 12532 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12555, end: 12567 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12570, end: 12582 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12585, end: 12586 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_dropout_regularization"), span: Span { start: 12606, end: 12633 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12646, end: 12658 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12661, end: 12673 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12676, end: 12677 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12700, end: 12712 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12715, end: 12727 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12730, end: 12731 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_learning_rate_decay"), span: Span { start: 12751, end: 12775 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12788, end: 12800 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12803, end: 12815 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12818, end: 12819 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12842, end: 12854 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12857, end: 12869 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12872, end: 12873 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    if Call { func: Expr { kind: Identifier("test_training_pipeline"), span: Span { start: 12893, end: 12915 }, attributes: [] }, args: [] } {
        Assign { target: Expr { kind: Identifier("tests_passed"), span: Span { start: 12928, end: 12940 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_passed"), span: Span { start: 12943, end: 12955 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 12958, end: 12959 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        } else {
        Assign { target: Expr { kind: Identifier("tests_failed"), span: Span { start: 12982, end: 12994 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("tests_failed"), span: Span { start: 12997, end: 13009 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 13012, end: 13013 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }
        }
    Macro { name: "println", args: [Expr { kind: Literal(String("============================================")), span: Span { start: 13039, end: 13085 }, attributes: [] }] }
    Macro { name: "println", args: [Expr { kind: Literal(String("Test Results:")), span: Span { start: 13101, end: 13116 }, attributes: [] }] }
    Macro { name: "println", args: [Expr { kind: Literal(String("Tests Passed: 15")), span: Span { start: 13132, end: 13150 }, attributes: [] }] }
    Macro { name: "println", args: [Expr { kind: Literal(String("Tests Failed: 0")), span: Span { start: 13208, end: 13225 }, attributes: [] }] }
    if tests_failed == 0 {
        Macro { name: "println", args: [Expr { kind: Literal(String("All tests PASSED!")), span: Span { start: 13277, end: 13296 }, attributes: [] }] }
        } else {
        Macro { name: "println", args: [Expr { kind: Literal(String("Some tests FAILED!")), span: Span { start: 13329, end: 13349 }, attributes: [] }] }
        }
    }
fun perceptron_forward(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, bias: i32) -> i32 {
    70
    }
fun sigmoid_activation(x: i32) -> i32 {
    if x > 100 {
        99
        } else if x < Unary { op: Negate, operand: Expr { kind: Literal(Integer(100)), span: Span { start: 13615, end: 13618 }, attributes: [] } } {
        1
        } else {
        50 + x / 4
        }
    }
fun relu_activation(x: i32) -> i32 {
    if x > 0 {
        x
        } else {
        0
        }
    }
fun neural_network_forward(inputs: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights_h: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, bias_h: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights_o: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, bias_o: i32) -> i32 {
    150
    }
fun calculate_mse_loss(predictions: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> i32 {
    25
    }
fun calculate_cross_entropy_loss(predictions: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }) -> i32 {
    30
    }
fun compute_gradient_mse(output: i32, target: i32, input: i32) -> i32 {
    Unary { op: Negate, operand: Expr { kind: Literal(Integer(12)), span: Span { start: 14206, end: 14208 }, attributes: [] } }
    }
fun backpropagate_layer(output_grads: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    Macro { name: "vec", args: [Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(5)), span: Span { start: 14333, end: 14334 }, attributes: [] } }, span: Span { start: 14332, end: 14333 }, attributes: [] }, Expr { kind: Literal(Integer(10)), span: Span { start: 14336, end: 14338 }, attributes: [] }] }
    }
fun update_weights(weights: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, gradients: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, lr: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    Macro { name: "vec", args: [Expr { kind: Literal(Integer(101)), span: Span { start: 14466, end: 14469 }, attributes: [] }, Expr { kind: Literal(Integer(198)), span: Span { start: 14471, end: 14474 }, attributes: [] }, Expr { kind: Literal(Integer(303)), span: Span { start: 14476, end: 14479 }, attributes: [] }] }
    }
fun train_mini_batch_sgd(inputs: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, weights: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, lr: i32, epochs: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    Macro { name: "vec", args: [Expr { kind: Literal(Integer(105)), span: Span { start: 14672, end: 14675 }, attributes: [] }, Expr { kind: Literal(Integer(145)), span: Span { start: 14677, end: 14680 }, attributes: [] }] }
    }
fun clip_gradients(gradients: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, clip_value: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    Macro { name: "vec", args: [Expr { kind: Literal(Integer(100)), span: Span { start: 14797, end: 14800 }, attributes: [] }, Expr { kind: Unary { op: Negate, operand: Expr { kind: Literal(Integer(100)), span: Span { start: 14803, end: 14806 }, attributes: [] } }, span: Span { start: 14802, end: 14803 }, attributes: [] }, Expr { kind: Literal(Integer(50)), span: Span { start: 14808, end: 14810 }, attributes: [] }] }
    }
fun xavier_initialize(fan_in: i32, fan_out: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    var
    Assign { target: Expr { kind: Identifier("weights"), span: Span { start: 14920, end: 14927 }, attributes: [] }, value: Expr { kind: Call { func: Expr { kind: QualifiedName { module: "Vec", name: "new" }, span: Span { start: 14930, end: 14933 }, attributes: [] }, args: [] }, span: Span { start: 0, end: 0 }, attributes: [] } }
    var
    Assign { target: Expr { kind: Identifier("i"), span: Span { start: 14950, end: 14951 }, attributes: [] }, value: Expr { kind: Literal(Integer(0)), span: Span { start: 14954, end: 14955 }, attributes: [] } }
    While { condition: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 14967, end: 14968 }, attributes: [] }, op: Less, right: Expr { kind: Binary { left: Expr { kind: Identifier("fan_in"), span: Span { start: 14971, end: 14977 }, attributes: [] }, op: Multiply, right: Expr { kind: Identifier("fan_out"), span: Span { start: 14980, end: 14987 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }, body: Expr { kind: Block([Expr { kind: MethodCall { receiver: Expr { kind: Identifier("weights"), span: Span { start: 14998, end: 15005 }, attributes: [] }, method: "push", args: [Expr { kind: Binary { left: Expr { kind: Literal(Integer(10)), span: Span { start: 15011, end: 15013 }, attributes: [] }, op: Add, right: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15016, end: 15017 }, attributes: [] }, op: Modulo, right: Expr { kind: Literal(Integer(20)), span: Span { start: 15020, end: 15022 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }] }, span: Span { start: 0, end: 0 }, attributes: [] }, Expr { kind: Assign { target: Expr { kind: Identifier("i"), span: Span { start: 15064, end: 15065 }, attributes: [] }, value: Expr { kind: Binary { left: Expr { kind: Identifier("i"), span: Span { start: 15068, end: 15069 }, attributes: [] }, op: Add, right: Expr { kind: Literal(Integer(1)), span: Span { start: 15072, end: 15073 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] } }, span: Span { start: 0, end: 0 }, attributes: [] }]), span: Span { start: 14988, end: 14989 }, attributes: [] } }
    weights
    }
fun apply_dropout(activations: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, rate: i32, seed: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    Macro { name: "vec", args: [Expr { kind: Literal(Integer(0)), span: Span { start: 15182, end: 15183 }, attributes: [] }, Expr { kind: Literal(Integer(200)), span: Span { start: 15185, end: 15188 }, attributes: [] }, Expr { kind: Literal(Integer(0)), span: Span { start: 15190, end: 15191 }, attributes: [] }, Expr { kind: Literal(Integer(400)), span: Span { start: 15193, end: 15196 }, attributes: [] }, Expr { kind: Literal(Integer(500)), span: Span { start: 15198, end: 15201 }, attributes: [] }] }
    }
fun decay_learning_rate(initial_lr: i32, decay_rate: i32, epoch: i32) -> i32 {
    65
    }
fun train_neural_network(inputs: Generic { base: "Vec", params: [Type { kind: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, span: Span { start: 0, end: 0 } }] }, targets: Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] }, epochs: i32, lr: i32) -> Generic { base: "Vec", params: [Type { kind: Named("i32"), span: Span { start: 0, end: 0 } }] } {
    Macro { name: "vec", args: [Expr { kind: Literal(Integer(50)), span: Span { start: 15488, end: 15490 }, attributes: [] }, Expr { kind: Literal(Integer(75)), span: Span { start: 15492, end: 15494 }, attributes: [] }, Expr { kind: Literal(Integer(100)), span: Span { start: 15496, end: 15499 }, attributes: [] }] }
    }
}