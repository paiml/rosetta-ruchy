# Fibonacci Benchmark Specification
# Defines test cases, validation rules, and benchmark parameters

[metadata]
name = "fibonacci"
version = "1.0.0"
description = "Fibonacci sequence computation benchmark"
category = "algorithms"
complexity = "varies" # O(2^n) recursive, O(n) iterative, O(log n) matrix
tags = ["recursion", "iteration", "memoization", "dynamic-programming"]

[benchmark]
# Number of iterations for statistical significance
iterations = 100
warmup_iterations = 10
# Confidence level for statistical analysis
confidence_level = 0.95
# Maximum execution time per test case (seconds)
timeout = 30
# Memory limit (MB)
memory_limit = 1024

[implementations]
# Each implementation must provide these variants
required_variants = ["recursive", "iterative", "memoized", "matrix"]
# Optional optimized variants
optional_variants = ["tail_recursive", "generator", "parallel"]

[[test_cases]]
name = "tiny"
description = "Minimal test for correctness"
input = 5
expected = 5
max_time_ms = 1
variants = ["all"]

[[test_cases]]
name = "small"
description = "Small input for all variants"
input = 10
expected = 55
max_time_ms = 10
variants = ["all"]

[[test_cases]]
name = "medium_recursive"
description = "Medium input for recursive variants"
input = 30
expected = 832040
max_time_ms = 100
variants = ["recursive", "memoized"]

[[test_cases]]
name = "medium_iterative"
description = "Medium input for iterative variants"
input = 40
expected = 102334155
max_time_ms = 10
variants = ["iterative", "memoized", "matrix"]

[[test_cases]]
name = "large"
description = "Large input for efficient variants only"
input = 1000
expected = "43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875"
max_time_ms = 100
variants = ["iterative", "memoized", "matrix"]

[[test_cases]]
name = "stress"
description = "Stress test for memory and performance"
input = 10000
# Expected value too large to include, validated programmatically
validate_function = "validate_large_fibonacci"
max_time_ms = 1000
variants = ["iterative", "matrix"]
optional = true

[validation]
# Validation rules for outputs
numeric_tolerance = 0  # Exact match for integers
allow_string_representation = true  # For very large numbers
check_overflow = true  # Verify handling of integer overflow

[metrics]
# Metrics to collect for each test
primary = "execution_time_ns"
secondary = [
    "memory_usage_bytes",
    "allocations_count",
    "cpu_cycles",
    "cache_misses",
    "function_calls"  # For recursive variants
]

[reporting]
# Output format configuration
format = "json"
include_raw_times = true
include_statistics = true
include_system_info = true
compare_variants = true
compare_languages = true

[quality_gates]
# Minimum requirements for acceptance
min_successful_tests = 0.95  # 95% of tests must pass
max_variance = 0.2  # Coefficient of variation < 20%
require_all_variants = false  # Some variants optional
performance_regression_threshold = 0.05  # 5% regression threshold