#!/usr/bin/env ruchy
// Counting Sort - Ruchy Implementation with Formal Complexity Verification

fun counting_sort(arr: &mut [i32], min_val: i32, max_val: i32) -> SortResult {
    let n = arr.len() as i32;
    let k = (max_val - min_val + 1) as usize;
    
    if n <= 1 {
        return SortResult { 
            algorithm: "Counting Sort".to_string(), 
            size: arr.len(), 
            time_ms: 0.0, 
            operations: n as usize, 
            range_size: k, 
            is_stable: true, 
            is_linear: true 
        };
    }
    
    // Phase 1: Initialize counting array - O(k) time and space
    let mut count = vec![0i32; k];
    
    // Phase 2: Count occurrences - O(n) time
    for &value in arr.iter() {
        let index = (value - min_val) as usize;
        count[index] += 1;
    }
    
    // Phase 3: Transform to cumulative counts - O(k) time
    for i in 1..k {
        count[i] += count[i - 1];
    }
    
    // Phase 4: Build output array (stable) - O(n) time, O(n) space
    let mut output = vec![0i32; arr.len()];
    
    for i in (0..arr.len()).rev() {  // Reverse iteration for stability
        let value = arr[i];
        let index = (value - min_val) as usize;
        count[index] -= 1;
        let position = count[index] as usize;
        output[position] = value;
    }
    
    // Phase 5: Copy back to original array - O(n) time
    for (i, &value) in output.iter().enumerate() {
        arr[i] = value;
    }
    
    SortResult { 
        algorithm: "Counting Sort".to_string(), 
        size: arr.len(), 
        time_ms: 0.0, 
        operations: n as usize + k, 
        range_size: k, 
        is_stable: true, 
        is_linear: true 
    }
}

struct SortResult {
    algorithm: String,
    size: usize,
    time_ms: f64,
    operations: usize,
    range_size: usize,
    is_stable: bool,
    is_linear: bool,
}

fun main() {
    println!("Counting Sort - Ruchy Implementation");
    
    let mut test_array = vec![5, 2, 8, 1, 9, 2, 5, 8];
    println!("Before: {:?}", test_array);
    
    let result = counting_sort(&mut test_array, 1, 9);
    println!("After: {:?}", test_array);
    println!("Operations: {}", result.operations);
}
