Topological Sort - Multiple Algorithm Implementation
======================================================================

Test Case: Linear Chain (1→2→3→4)
============================================================
Graph Structure:
----------------------------------------
  1 → [2]
  2 → [3]
  3 → [4]
  4 → (no outgoing edges)
  Total vertices: 4
  Total edges: 3

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.002 |       No | [1, 2, 3, 4]
DFS Iterative             |      Yes |      0.002 |       No | [1, 2, 3, 4]
Kahn's Algorithm (BFS)    |      Yes |      0.001 |       No | [1, 2, 3, 4]

Validation: ✅ PASS
Sample valid ordering: [1, 2, 3, 4]
Multiple valid solutions found - this is expected for DAGs

Test Case: Diamond DAG
============================================================
Graph Structure:
----------------------------------------
  1 → [2, 3]
  2 → [4]
  3 → [4]
  4 → (no outgoing edges)
  Total vertices: 4
  Total edges: 4

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.001 |       No | [1, 2, 3, 4]
DFS Iterative             |      Yes |      0.001 |       No | [1, 2, 3, 4]
Kahn's Algorithm (BFS)    |      Yes |      0.001 |       No | [1, 2, 3, 4]

Validation: ✅ PASS
Sample valid ordering: [1, 2, 3, 4]
Multiple valid solutions found - this is expected for DAGs

Test Case: Course Prerequisites DAG
============================================================
Graph Structure:
----------------------------------------
  101 → [201, 202]
  201 → [301]
  202 → [302, 303]
  301 → [401]
  302 → [401]
  303 → (no outgoing edges)
  401 → (no outgoing edges)
  Total vertices: 7
  Total edges: 7

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.002 |       No | [101, 202, 303, 302, 201, 301, 401]
DFS Iterative             |      Yes |      0.002 |       No | [101, 202, 302, 303, 201, 301, 401]
Kahn's Algorithm (BFS)    |      Yes |      0.001 |       No | [101, 201, 202, 301, 302, 303, 401]

Validation: ✅ PASS
Sample valid ordering: [101, 202, 303, 302, 201, 301, 401]
Multiple valid solutions found - this is expected for DAGs

Test Case: Single Vertex
============================================================
Graph Structure:
----------------------------------------
  42 → (no outgoing edges)
  Total vertices: 1
  Total edges: 0

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.000 |       No | [42]
DFS Iterative             |      Yes |      0.000 |       No | [42]
Kahn's Algorithm (BFS)    |      Yes |      0.000 |       No | [42]

Validation: ✅ PASS
Sample valid ordering: [42]
Multiple valid solutions found - this is expected for DAGs

Test Case: Disconnected Components
============================================================
Graph Structure:
----------------------------------------
  1 → [2]
  2 → (no outgoing edges)
  3 → [4]
  4 → (no outgoing edges)
  5 → [6]
  6 → (no outgoing edges)
  7 → (no outgoing edges)
  Total vertices: 7
  Total edges: 3

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.001 |       No | [5, 6, 3, 4, 1, 2, 7]
DFS Iterative             |      Yes |      0.002 |       No | [5, 6, 3, 4, 1, 2, 7]
Kahn's Algorithm (BFS)    |      Yes |      0.001 |       No | [5, 7, 1, 3, 6, 2, 4]

Validation: ✅ PASS
Sample valid ordering: [5, 6, 3, 4, 1, 2, 7]
Multiple valid solutions found - this is expected for DAGs

Test Case: Graph with Cycle (Invalid for TopSort)
============================================================
Graph Structure:
----------------------------------------
  1 → [2]
  2 → [3, 4]
  3 → [1]
  4 → (no outgoing edges)
  Total vertices: 4
  Total edges: 4

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |       No |      0.001 |      Yes | N/A (cycle detected)
DFS Iterative             |       No |      0.000 |      Yes | N/A (cycle detected)
Kahn's Algorithm (BFS)    |       No |      0.000 |      Yes | N/A (cycle detected)

Test Case: Build Dependencies DAG
============================================================
Graph Structure:
----------------------------------------
  1 → [2, 3, 6]
  2 → [4]
  3 → [4]
  4 → [5]
  5 → (no outgoing edges)
  6 → [5]
  Total vertices: 6
  Total edges: 7

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.002 |       No | [1, 2, 6, 3, 4, 5]
DFS Iterative             |      Yes |      0.002 |       No | [1, 2, 6, 3, 4, 5]
Kahn's Algorithm (BFS)    |      Yes |      0.001 |       No | [1, 2, 3, 6, 4, 5]

Validation: ✅ PASS
Sample valid ordering: [1, 2, 6, 3, 4, 5]
Multiple valid solutions found - this is expected for DAGs

Test Case: Large DAG (100 vertices)
============================================================
Graph Structure:
----------------------------------------
  0 → [1, 2, 3, 4]
  1 → [2, 3, 4, 5]
  2 → [3, 4, 5, 6]
  3 → [4, 5, 6, 7]
  4 → [5, 6, 7, 8]
  5 → [6, 7, 8, 9]
  6 → [7, 8, 9, 10]
  7 → [8, 9, 10, 11]
  8 → [9, 10, 11, 12]
  9 → [10, 11, 12, 13]
  10 → [11, 12, 13, 14]
  11 → [12, 13, 14, 15]
  12 → [13, 14, 15, 16]
  13 → [14, 15, 16, 17]
  14 → [15, 16, 17, 18]
  15 → [16, 17, 18, 19]
  16 → [17, 18, 19, 20]
  17 → [18, 19, 20, 21]
  18 → [19, 20, 21, 22]
  19 → [20, 21, 22, 23]
  20 → [21, 22, 23, 24]
  21 → [22, 23, 24, 25]
  22 → [23, 24, 25, 26]
  23 → [24, 25, 26, 27]
  24 → [25, 26, 27, 28]
  25 → [26, 27, 28, 29]
  26 → [27, 28, 29, 30]
  27 → [28, 29, 30, 31]
  28 → [29, 30, 31, 32]
  29 → [30, 31, 32, 33]
  30 → [31, 32, 33, 34]
  31 → [32, 33, 34, 35]
  32 → [33, 34, 35, 36]
  33 → [34, 35, 36, 37]
  34 → [35, 36, 37, 38]
  35 → [36, 37, 38, 39]
  36 → [37, 38, 39, 40]
  37 → [38, 39, 40, 41]
  38 → [39, 40, 41, 42]
  39 → [40, 41, 42, 43]
  40 → [41, 42, 43, 44]
  41 → [42, 43, 44, 45]
  42 → [43, 44, 45, 46]
  43 → [44, 45, 46, 47]
  44 → [45, 46, 47, 48]
  45 → [46, 47, 48, 49]
  46 → [47, 48, 49, 50]
  47 → [48, 49, 50, 51]
  48 → [49, 50, 51, 52]
  49 → [50, 51, 52, 53]
  50 → [51, 52, 53, 54]
  51 → [52, 53, 54, 55]
  52 → [53, 54, 55, 56]
  53 → [54, 55, 56, 57]
  54 → [55, 56, 57, 58]
  55 → [56, 57, 58, 59]
  56 → [57, 58, 59, 60]
  57 → [58, 59, 60, 61]
  58 → [59, 60, 61, 62]
  59 → [60, 61, 62, 63]
  60 → [61, 62, 63, 64]
  61 → [62, 63, 64, 65]
  62 → [63, 64, 65, 66]
  63 → [64, 65, 66, 67]
  64 → [65, 66, 67, 68]
  65 → [66, 67, 68, 69]
  66 → [67, 68, 69, 70]
  67 → [68, 69, 70, 71]
  68 → [69, 70, 71, 72]
  69 → [70, 71, 72, 73]
  70 → [71, 72, 73, 74]
  71 → [72, 73, 74, 75]
  72 → [73, 74, 75, 76]
  73 → [74, 75, 76, 77]
  74 → [75, 76, 77, 78]
  75 → [76, 77, 78, 79]
  76 → [77, 78, 79, 80]
  77 → [78, 79, 80, 81]
  78 → [79, 80, 81, 82]
  79 → [80, 81, 82, 83]
  80 → [81, 82, 83, 84]
  81 → [82, 83, 84, 85]
  82 → [83, 84, 85, 86]
  83 → [84, 85, 86, 87]
  84 → [85, 86, 87, 88]
  85 → [86, 87, 88, 89]
  86 → [87, 88, 89, 90]
  87 → [88, 89, 90, 91]
  88 → [89, 90, 91, 92]
  89 → [90, 91, 92, 93]
  90 → [91, 92, 93, 94]
  91 → [92, 93, 94, 95]
  92 → [93, 94, 95, 96]
  93 → [94, 95, 96, 97]
  94 → [95, 96, 97, 98]
  95 → [96, 97, 98, 99]
  96 → [97, 98, 99]
  97 → [98, 99]
  98 → [99]
  99 → (no outgoing edges)
  Total vertices: 100
  Total edges: 390

Algorithm Results:
----------------------------------------------------------------------
Algorithm                 |    Valid |  Time (ms) |    Cycle | Ordering
----------------------------------------------------------------------
DFS Recursive             |      Yes |      0.034 |       No | [0, 1, 2, 3, 4, 5]...
DFS Iterative             |      Yes |      0.031 |       No | [0, 1, 2, 3, 4, 5]...
Kahn's Algorithm (BFS)    |      Yes |      0.018 |       No | [0, 1, 2, 3, 4, 5]...

Validation: ✅ PASS
Sample valid ordering: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
Multiple valid solutions found - this is expected for DAGs


Algorithm Summary:
======================================================================
DFS Recursive:     O(V + E) time, O(V) space, natural implementation
DFS Iterative:     O(V + E) time, O(V) space, avoids recursion
Kahn's Algorithm:  O(V + E) time, O(V) space, detects cycles early

All algorithms are optimal with linear time complexity!

Applications:
- Build systems and compilation order
- Package dependency resolution
- Task scheduling with prerequisites
- Course prerequisite planning
- Spreadsheet formula evaluation order
