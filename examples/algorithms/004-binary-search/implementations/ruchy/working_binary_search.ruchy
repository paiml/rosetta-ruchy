// Binary Search - Ruchy v1.4.0 Implementation

use std::collections::HashMap;

// Basic binary search function
fn binary_search<T: Ord>(arr: &[T], target: &T) -> Option<usize> {
    let mut left = 0;
    let mut right = arr.len();
    
    while left < right {
        let mid = left + (right - left) / 2;
        
        match arr[mid].cmp(target) {
            std::cmp::Ordering::Equal => return Some(mid),
            std::cmp::Ordering::Less => left = mid + 1,
            std::cmp::Ordering::Greater => right = mid,
        }
    }
    
    None
}

// Enhanced binary search with HashMap caching (v1.4.0 feature)
struct BinarySearcher<T> {
    cache: HashMap<T, Option<usize>>,
    data: Vec<T>,
}

impl<T: Ord + Clone + std::hash::Hash + std::fmt::Debug> BinarySearcher<T> {
    fn new(data: Vec<T>) -> Self {
        Self {
            cache: HashMap::new(),
            data,
        }
    }
    
    fn search_with_cache(&mut self, target: &T) -> Option<usize> {
        // Check cache first (v1.4.0 HashMap integration)
        if let Some(cached_result) = self.cache.get(target) {
            println!("Cache hit for target: {:?}", target);
            return *cached_result;
        }
        
        // Cache miss - perform search
        let result = binary_search(&self.data, target);
        
        // Cache the result
        self.cache.insert(target.clone(), result);
        println!("Cached result for {:?}: {:?}", target, result);
        
        result
    }
}

fn main() {
    println!("Binary Search - Ruchy v1.4.0 Advanced Features");
    println!("===============================================");
    
    let data = vec![1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 23, 29];
    println!("Test data: {:?}", data);
    println!();
    
    // Test basic binary search
    println!("Basic binary search tests:");
    for target in &[5, 11, 20, 1, 29, 25] {
        match binary_search(&data, target) {
            Some(idx) => println!("  Found {} at index {}", target, idx),
            None => println!("  {} not found", target),
        }
    }
    
    println!();
    println!("Enhanced search with caching:");
    
    // Test enhanced searcher with caching
    let mut searcher = BinarySearcher::new(data.clone());
    
    // Test searches with caching
    for target in &[7, 15, 7, 23, 15, 7] {
        match searcher.search_with_cache(target) {
            Some(idx) => println!("  Found {} at index {}", target, idx),
            None => println!("  {} not found", target),
        }
    }
    
    println!();
    println!("Binary search demonstration complete");
}