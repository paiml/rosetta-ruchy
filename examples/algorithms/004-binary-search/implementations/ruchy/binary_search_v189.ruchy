// Binary Search Algorithm - Ruchy v1.8.9 Implementation
// Demonstrates logarithmic search with formal verification
// Migrated to v1.89.0 explicit mutability requirements

// Constants for algorithm
fun get_max_array_size() -> i32 {
    1000
}

fun get_not_found() -> i32 {
    -1
}

// Create sorted array for testing
fun create_sorted_array(size: i32) -> [i32; 1000] {
    let mut array = [0; 1000]  // ✅ v1.89: explicit mut for array initialization
    
    if size <= 0 || size > 1000 {
        return array;
    }
    
    let mut i = 0  // ✅ v1.89: explicit mut for loop counter
    while i < size {
        array[i] = i * 2;  // Even numbers: 0, 2, 4, 6, 8, ...
        i = i + 1  // ✅ v1.89: reassignment works with mut
    }
    
    array
}

// Create custom sorted array with specific values
fun create_custom_array(values: [i32; 20], count: i32) -> [i32; 1000] {
    let mut array = [0; 1000]  // ✅ v1.89: explicit mut for array initialization
    
    if count <= 0 || count > 20 {
        return array;
    }
    
    let mut i = 0  // ✅ v1.89: explicit mut for loop counter
    while i < count && i < 1000 {
        array[i] = values[i];
        i = i + 1  // ✅ v1.89: reassignment works with mut
    }
    
    array
}

// Iterative binary search with explicit mutability
fun binary_search_iterative(array: [i32; 1000], size: i32, target: i32) -> i32 {
    let mut left = 0  // ✅ v1.89: explicit mut for left boundary
    let mut right = size - 1  // ✅ v1.89: explicit mut for right boundary
    
    while left <= right {
        let mid = left + (right - left) / 2;  // Avoid overflow
        
        if array[mid] == target {
            return mid;
        } else if array[mid] < target {
            left = mid + 1;  // ✅ v1.89: reassignment works with mut
        } else {
            right = mid - 1;  // ✅ v1.89: reassignment works with mut
        }
    }
    
    get_not_found()
}

// Recursive binary search helper
fun binary_search_recursive_helper(array: [i32; 1000], left: i32, right: i32, target: i32) -> i32 {
    if left > right {
        return get_not_found();
    }
    
    let mid = left + (right - left) / 2;
    
    if array[mid] == target {
        mid
    } else if array[mid] < target {
        binary_search_recursive_helper(array, mid + 1, right, target)
    } else {
        binary_search_recursive_helper(array, left, mid - 1, target)
    }
}

// Recursive binary search
fun binary_search_recursive(array: [i32; 1000], size: i32, target: i32) -> i32 {
    binary_search_recursive_helper(array, 0, size - 1, target)
}

// Find leftmost occurrence of target (lower bound)
fun binary_search_leftmost(array: [i32; 1000], size: i32, target: i32) -> i32 {
    let mut left = 0  // ✅ v1.89: explicit mut for left boundary
    let mut right = size  // ✅ v1.89: explicit mut for right boundary (exclusive)
    
    while left < right {
        let mid = left + (right - left) / 2;
        
        if array[mid] < target {
            left = mid + 1;  // ✅ v1.89: reassignment works with mut
        } else {
            right = mid;  // ✅ v1.89: reassignment works with mut
        }
    }
    
    if left < size && array[left] == target {
        left
    } else {
        get_not_found()
    }
}

// Find rightmost occurrence of target (upper bound)
fun binary_search_rightmost(array: [i32; 1000], size: i32, target: i32) -> i32 {
    let mut left = 0  // ✅ v1.89: explicit mut for left boundary
    let mut right = size  // ✅ v1.89: explicit mut for right boundary (exclusive)
    
    while left < right {
        let mid = left + (right - left) / 2;
        
        if array[mid] <= target {
            left = mid + 1;  // ✅ v1.89: reassignment works with mut
        } else {
            right = mid;  // ✅ v1.89: reassignment works with mut
        }
    }
    
    if left > 0 && array[left - 1] == target {
        left - 1
    } else {
        get_not_found()
    }
}

// Count occurrences of target using leftmost/rightmost
fun count_occurrences(array: [i32; 1000], size: i32, target: i32) -> i32 {
    let leftmost = binary_search_leftmost(array, size, target);
    if leftmost == get_not_found() {
        return 0;
    }
    
    let rightmost = binary_search_rightmost(array, size, target);
    rightmost - leftmost + 1
}

// Find insertion point for target to maintain sorted order
fun find_insertion_point(array: [i32; 1000], size: i32, target: i32) -> i32 {
    let mut left = 0  // ✅ v1.89: explicit mut for left boundary
    let mut right = size  // ✅ v1.89: explicit mut for right boundary
    
    while left < right {
        let mid = left + (right - left) / 2;
        
        if array[mid] < target {
            left = mid + 1;  // ✅ v1.89: reassignment works with mut
        } else {
            right = mid;  // ✅ v1.89: reassignment works with mut
        }
    }
    
    left
}

// Search in rotated sorted array
fun search_rotated_array(array: [i32; 1000], size: i32, target: i32) -> i32 {
    let mut left = 0  // ✅ v1.89: explicit mut for left boundary
    let mut right = size - 1  // ✅ v1.89: explicit mut for right boundary
    
    while left <= right {
        let mid = left + (right - left) / 2;
        
        if array[mid] == target {
            return mid;
        }
        
        // Check which half is sorted
        if array[left] <= array[mid] {
            // Left half is sorted
            if target >= array[left] && target < array[mid] {
                right = mid - 1;  // ✅ v1.89: reassignment works with mut
            } else {
                left = mid + 1;  // ✅ v1.89: reassignment works with mut
            }
        } else {
            // Right half is sorted
            if target > array[mid] && target <= array[right] {
                left = mid + 1;  // ✅ v1.89: reassignment works with mut
            } else {
                right = mid - 1;  // ✅ v1.89: reassignment works with mut
            }
        }
    }
    
    get_not_found()
}

// Find peak element in array (any local maximum)
fun find_peak_element(array: [i32; 1000], size: i32) -> i32 {
    if size <= 0 {
        return get_not_found();
    }
    
    if size == 1 {
        return 0;
    }
    
    let mut left = 0  // ✅ v1.89: explicit mut for left boundary
    let mut right = size - 1  // ✅ v1.89: explicit mut for right boundary
    
    while left < right {
        let mid = left + (right - left) / 2;
        
        if mid + 1 < size && array[mid] < array[mid + 1] {
            left = mid + 1;  // ✅ v1.89: reassignment works with mut
        } else {
            right = mid;  // ✅ v1.89: reassignment works with mut
        }
    }
    
    left
}

// Verify binary search properties
fun verify_binary_search_result(array: [i32; 1000], size: i32, target: i32, result: i32) -> bool {
    // Check if result is valid index or -1
    if result != get_not_found() && (result < 0 || result >= size) {
        return false;
    }
    
    // If found, verify the element matches target
    if result != get_not_found() && array[result] != target {
        return false;
    }
    
    // If not found, verify target doesn't exist
    if result == get_not_found() {
        let mut i = 0  // ✅ v1.89: explicit mut for loop counter
        while i < size {
            if array[i] == target {
                return false;  // Target exists but wasn't found
            }
            i = i + 1  // ✅ v1.89: reassignment works with mut
        }
    }
    
    true
}

// Verify array is sorted (prerequisite for binary search)
fun verify_array_sorted(array: [i32; 1000], size: i32) -> bool {
    if size <= 1 {
        return true;
    }
    
    let mut i = 1  // ✅ v1.89: explicit mut for loop counter
    while i < size {
        if array[i - 1] > array[i] {
            return false;  // Array not sorted
        }
        i = i + 1  // ✅ v1.89: reassignment works with mut
    }
    
    true
}

// Test binary search algorithms
fun test_binary_search() {
    println!("Binary Search Algorithm Tests - v1.8.9");
    println!("=====================================");
    
    // Test case 1: Basic search in even numbers
    println!("Test Case 1: Search in even numbers [0,2,4,6,8,10,12,14,16,18]");
    let array1 = create_sorted_array(10);
    let size1 = 10;
    let target1 = 8;
    
    let iterative_result = binary_search_iterative(array1, size1, target1);
    let recursive_result = binary_search_recursive(array1, size1, target1);
    
    println!("Target: {}", target1);
    println!("Iterative result: {}", iterative_result);
    println!("Recursive result: {}", recursive_result);
    
    if verify_binary_search_result(array1, size1, target1, iterative_result) {
        println!("✓ Iterative binary search verification: Pass");
    } else {
        println!("✗ Iterative binary search verification: Fail");
    }
    
    if iterative_result == recursive_result {
        println!("✓ Iterative and recursive results consistent");
    } else {
        println!("✗ Algorithm inconsistency detected");
    }
    
    // Test case 2: Search for non-existent element
    println!("");
    println!("Test Case 2: Search for non-existent element");
    let target2 = 7;  // Odd number, not in even sequence
    let not_found_result = binary_search_iterative(array1, size1, target2);
    
    println!("Target: {}", target2);
    println!("Result: {}", not_found_result);
    
    if not_found_result == get_not_found() {
        println!("✓ Not found case handled correctly");
    } else {
        println!("✗ Not found case failed");
    }
    
    // Test case 3: Boundary searches (leftmost/rightmost)
    println!("");
    println!("Test Case 3: Array with duplicates [1,1,2,2,2,3,3,4,5,5]");
    let custom_values = [1, 1, 2, 2, 2, 3, 3, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let array3 = create_custom_array(custom_values, 10);
    let size3 = 10;
    let target3 = 2;
    
    let leftmost = binary_search_leftmost(array3, size3, target3);
    let rightmost = binary_search_rightmost(array3, size3, target3);
    let count = count_occurrences(array3, size3, target3);
    
    println!("Target: {}", target3);
    println!("Leftmost occurrence: {}", leftmost);
    println!("Rightmost occurrence: {}", rightmost);
    println!("Total occurrences: {}", count);
    
    if count == 3 && leftmost == 2 && rightmost == 4 {
        println!("✓ Boundary search verification: Pass");
    } else {
        println!("✗ Boundary search verification: Fail");
    }
    
    // Test case 4: Insertion point
    println!("");
    println!("Test Case 4: Find insertion point");
    let insertion_target = 7;
    let insertion_point = find_insertion_point(array1, size1, insertion_target);
    
    println!("Insert {} at position: {}", insertion_target, insertion_point);
    
    if insertion_point == 4 {  // Should be between 6 and 8
        println!("✓ Insertion point correct");
    } else {
        println!("✗ Insertion point incorrect");
    }
}

// Analyze binary search complexity
fun analyze_binary_search_complexity() {
    println!("Binary Search Complexity Analysis");
    println!("================================");
    
    println!("Time Complexity:");
    println!("  Standard Binary Search: O(log n)");
    println!("    Eliminates half of search space each iteration");
    println!("    Maximum comparisons: ⌈log₂(n)⌉");
    println!("");
    println!("  Leftmost/Rightmost Search: O(log n)");
    println!("    Same logarithmic complexity as standard search");
    println!("");
    println!("  Rotated Array Search: O(log n)");
    println!("    Still logarithmic despite rotation");
    println!("");
    
    println!("Space Complexity:");
    println!("  Iterative Implementation: O(1)");
    println!("    Constant extra space for variables");
    println!("");
    println!("  Recursive Implementation: O(log n)");
    println!("    Stack space for recursive calls");
    println!("");
    
    println!("Prerequisites:");
    println!("  ✓ Array must be sorted");
    println!("  ✓ Random access to elements");
    println!("  ✓ Comparison-based ordering");
    println!("");
    
    println!("Variants and Applications:");
    println!("  • Lower/upper bound searches");
    println!("  • Peak finding algorithms");
    println!("  • Search in rotated arrays");
    println!("  • Interpolation search (O(log log n) for uniform data)");
}

// Demonstrate search applications
fun demonstrate_search_applications() {
    println!("Binary Search Applications");
    println!("=========================");
    
    println!("1. Database Indexing:");
    println!("   B-tree index searches");
    println!("   Range query optimization");
    println!("");
    
    println!("2. Standard Libraries:");
    println!("   std::lower_bound, std::upper_bound");
    println!("   Dictionary lookups");
    println!("");
    
    println!("3. Game Development:");
    println!("   Collision detection optimizations");
    println!("   Level-of-detail selection");
    println!("");
    
    println!("4. Scientific Computing:");
    println!("   Root finding (bisection method)");
    println!("   Function minimization");
    println!("");
    
    println!("5. System Software:");
    println!("   Virtual memory page lookups");
    println!("   Process scheduling");
}

// Main demonstration function
fun main() {
    println!("Binary Search Algorithm - Ruchy v1.8.9");
    println!("======================================");
    println!("Demonstrating logarithmic search algorithms");
    println!("");
    
    // Run algorithm tests
    test_binary_search();
    println!("");
    
    // Analyze complexity
    analyze_binary_search_complexity();
    println!("");
    
    // Demonstrate applications
    demonstrate_search_applications();
    println!("");
    
    println!("✅ Binary Search v1.8.9 demonstration complete");
    println!("🔬 Ready for Ruchy formal verification:");
    println!("   ruchy runtime  - Should detect O(log n) complexity");
    println!("   ruchy provability - Should verify search correctness");
    println!("   ruchy score - Should achieve A+ grade");
    println!("");
    println!("Expected Scientific Results:");
    println!("  Complexity: O(log n) for all search variants");
    println!("  Provability: 100/100 logarithmic search verification");
    println!("  Quality: A+ grade (≥0.95) for fundamental search algorithm");
}