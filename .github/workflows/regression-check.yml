name: Regression Check

on:
  schedule:
    # Run daily at 6am UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  regression-check:
    name: Daily Regression Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Ruchy
        run: |
          cargo install ruchy --version 3.77.0 || cargo install ruchy
          ruchy --version

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Get current test results
        run: |
          make test-all-examples
          cp test-results.json test-results-current.json

      - name: Get baseline (from last successful run)
        run: |
          if [ -f test-results-baseline.json ]; then
            echo "Using existing baseline"
          else
            echo "Creating new baseline"
            cp test-results-current.json test-results-baseline.json
          fi

      - name: Run regression detection
        id: regression
        continue-on-error: true
        run: |
          ./scripts/test-regression.sh

      - name: Create issue on regression
        if: steps.regression.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const current = JSON.parse(fs.readFileSync('test-results-current.json', 'utf8'));
            const baseline = JSON.parse(fs.readFileSync('test-results-baseline.json', 'utf8'));

            const currentRate = (current.summary.success_rate * 100).toFixed(1);
            const baselineRate = (baseline.summary.success_rate * 100).toFixed(1);
            const delta = (currentRate - baselineRate).toFixed(1);

            const title = `ðŸš¨ Regression Detected: Success rate dropped ${delta}%`;
            const body = `## Regression Alert

            A regression has been detected in the test suite.

            ### Summary
            - **Baseline**: ${baselineRate}% (${baseline.summary.passing}/${baseline.summary.total_examples})
            - **Current**: ${currentRate}% (${current.summary.passing}/${current.summary.total_examples})
            - **Change**: ${delta}%

            ### By Category
            | Category | Baseline | Current | Change |
            |----------|----------|---------|--------|
            | algorithms | ${(baseline.by_category.algorithms.rate * 100).toFixed(1)}% | ${(current.by_category.algorithms.rate * 100).toFixed(1)}% | ${((current.by_category.algorithms.rate - baseline.by_category.algorithms.rate) * 100).toFixed(1)}% |
            | data-science | ${(baseline.by_category['data-science'].rate * 100).toFixed(1)}% | ${(current.by_category['data-science'].rate * 100).toFixed(1)}% | ${((current.by_category['data-science'].rate - baseline.by_category['data-science'].rate) * 100).toFixed(1)}% |
            | advanced-ai | ${(baseline.by_category['advanced-ai'].rate * 100).toFixed(1)}% | ${(current.by_category['advanced-ai'].rate * 100).toFixed(1)}% | ${((current.by_category['advanced-ai'].rate - baseline.by_category['advanced-ai'].rate) * 100).toFixed(1)}% |

            ### Action Required
            1. Review failing examples in [INTEGRATION.md](../blob/main/INTEGRATION.md)
            2. Check for breaking changes in Ruchy ${current.ruchy_version}
            3. Update migration patterns if needed
            4. Fix failing examples

            ### Details
            - **Ruchy Version**: ${current.ruchy_version}
            - **Timestamp**: ${current.timestamp}
            - **Workflow**: [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;

            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'regression'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['regression', 'bug', 'automated']
              });
            }

      - name: Update baseline on success
        if: steps.regression.outcome == 'success'
        run: |
          cp test-results-current.json test-results-baseline.json
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add test-results-baseline.json
          git commit -m "chore: Update regression baseline [skip ci]" || exit 0
          git push
