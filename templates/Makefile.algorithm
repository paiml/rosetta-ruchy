# Makefile for Algorithm: $(ALGORITHM_NAME)
# Scientific Reproducibility Framework
# This template ensures all experiments are reproducible

# Configuration
ALGORITHM := fibonacci
RUCHY := ruchy
ITERATIONS := 10000
WARMUP := 100
CONFIDENCE := 0.95

# Input sizes for benchmarking
SIZES := 10 20 30 40

# Languages to benchmark
LANGUAGES := ruchy rust python javascript go

# Directories
RESULTS_DIR := results
IMPL_DIR := implementations

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

.PHONY: all verify benchmark statistics report reproduce clean help

# Default target
all: verify benchmark statistics report
	@echo "$(GREEN)✅ All tasks completed successfully$(NC)"

# Help target
help:
	@echo "Rosetta Ruchy - Scientific Validation Makefile"
	@echo "=============================================="
	@echo ""
	@echo "Targets:"
	@echo "  make all        - Run complete validation pipeline"
	@echo "  make verify     - Run formal verification (Ruchy only)"
	@echo "  make benchmark  - Run performance benchmarks"
	@echo "  make statistics - Perform statistical analysis"
	@echo "  make report     - Generate scientific report"
	@echo "  make reproduce  - Clean and run everything"
	@echo "  make clean      - Remove all generated files"
	@echo ""
	@echo "Configuration:"
	@echo "  ITERATIONS=$(ITERATIONS)"
	@echo "  WARMUP=$(WARMUP)"
	@echo "  CONFIDENCE=$(CONFIDENCE)"
	@echo "  SIZES=$(SIZES)"

# Create results directory
$(RESULTS_DIR):
	@mkdir -p $(RESULTS_DIR)

# Step 1: Formal Verification (Ruchy's unique capability)
verify: $(RESULTS_DIR)
	@echo "$(YELLOW)=== FORMAL VERIFICATION ===$(NC)"
	@echo "Running Ruchy formal verification tools..."
	
	# Check syntax
	@echo -n "Syntax check: "
	@$(RUCHY) check $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy && echo "$(GREEN)✓$(NC)" || echo "$(RED)✗$(NC)"
	
	# Runtime complexity analysis
	@echo -n "Complexity analysis: "
	@$(RUCHY) runtime $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy > $(RESULTS_DIR)/complexity.txt
	@echo "$(GREEN)✓$(NC) (saved to $(RESULTS_DIR)/complexity.txt)"
	
	# Provability analysis
	@echo -n "Provability analysis: "
	@$(RUCHY) provability $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy > $(RESULTS_DIR)/provability.txt
	@echo "$(GREEN)✓$(NC) (saved to $(RESULTS_DIR)/provability.txt)"
	
	# Quality scoring
	@echo -n "Quality scoring: "
	@$(RUCHY) score $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy > $(RESULTS_DIR)/quality_score.txt
	@echo "$(GREEN)✓$(NC) (saved to $(RESULTS_DIR)/quality_score.txt)"
	
	# Formal proof generation (if available)
	@echo -n "Formal proof: "
	@$(RUCHY) prove $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy > $(RESULTS_DIR)/formal_proof.txt 2>/dev/null || echo "Not available"
	
	@echo "$(GREEN)Verification complete!$(NC)"
	@echo ""

# Step 2: Build all implementations
build:
	@echo "$(YELLOW)=== BUILDING IMPLEMENTATIONS ===$(NC)"
	
	# Ruchy (already built)
	@echo "Ruchy: No build needed (interpreted)"
	
	# Rust
	@if [ -d "$(IMPL_DIR)/rust" ]; then \
		echo -n "Rust: "; \
		cd $(IMPL_DIR)/rust && cargo build --release --quiet && echo "$(GREEN)✓$(NC)"; \
	fi
	
	# Python
	@if [ -d "$(IMPL_DIR)/python" ]; then \
		echo -n "Python: "; \
		cd $(IMPL_DIR)/python && python3 -m py_compile *.py 2>/dev/null && echo "$(GREEN)✓$(NC)"; \
	fi
	
	# JavaScript
	@if [ -d "$(IMPL_DIR)/javascript" ]; then \
		echo -n "JavaScript: "; \
		cd $(IMPL_DIR)/javascript && npm install --quiet && echo "$(GREEN)✓$(NC)"; \
	fi
	
	# Go
	@if [ -d "$(IMPL_DIR)/go" ]; then \
		echo -n "Go: "; \
		cd $(IMPL_DIR)/go && go build && echo "$(GREEN)✓$(NC)"; \
	fi
	
	@echo ""

# Step 3: Run benchmarks
benchmark: $(RESULTS_DIR) build
	@echo "$(YELLOW)=== PERFORMANCE BENCHMARKING ===$(NC)"
	@echo "Configuration:"
	@echo "  Iterations: $(ITERATIONS)"
	@echo "  Warmup: $(WARMUP)"
	@echo "  Input sizes: $(SIZES)"
	@echo ""
	
	# Run Ruchy benchmark harness
	@echo "Running Ruchy benchmark..."
	@$(RUCHY) run ../../harness/benchmark/benchmark.ruchy -- \
		--algorithm $(ALGORITHM) \
		--iterations $(ITERATIONS) \
		--warmup $(WARMUP) \
		--output $(RESULTS_DIR)/ruchy_bench.json
	
	# Run Rust benchmark
	@if [ -d "$(IMPL_DIR)/rust" ]; then \
		echo "Running Rust benchmark..."; \
		cd $(IMPL_DIR)/rust && \
		cargo bench --quiet -- --output ../../../$(RESULTS_DIR)/rust_bench.json; \
	fi
	
	# Run Python benchmark
	@if [ -d "$(IMPL_DIR)/python" ]; then \
		echo "Running Python benchmark..."; \
		cd $(IMPL_DIR)/python && \
		python3 benchmark.py --iterations $(ITERATIONS) \
			--output ../../../$(RESULTS_DIR)/python_bench.json; \
	fi
	
	# Run JavaScript benchmark
	@if [ -d "$(IMPL_DIR)/javascript" ]; then \
		echo "Running JavaScript benchmark..."; \
		cd $(IMPL_DIR)/javascript && \
		node benchmark.js --iterations $(ITERATIONS) \
			--output ../../../$(RESULTS_DIR)/js_bench.json; \
	fi
	
	# Run Go benchmark
	@if [ -d "$(IMPL_DIR)/go" ]; then \
		echo "Running Go benchmark..."; \
		cd $(IMPL_DIR)/go && \
		go test -bench=. -benchtime=$(ITERATIONS)x \
			-benchmem > ../../../$(RESULTS_DIR)/go_bench.txt; \
	fi
	
	@echo "$(GREEN)Benchmarking complete!$(NC)"
	@echo ""

# Step 4: Statistical analysis
statistics: $(RESULTS_DIR)
	@echo "$(YELLOW)=== STATISTICAL ANALYSIS ===$(NC)"
	@echo "Running statistical analysis..."
	
	@$(RUCHY) run ../../harness/statistics/statistics.ruchy
	
	@echo "Results:"
	@if [ -f "$(RESULTS_DIR)/statistical_analysis.md" ]; then \
		cat $(RESULTS_DIR)/statistical_analysis.md | grep -E "p-value|ratio|Significant"; \
	fi
	
	@echo "$(GREEN)Statistical analysis complete!$(NC)"
	@echo ""

# Step 5: Generate visualizations
visualize: $(RESULTS_DIR)
	@echo "$(YELLOW)=== GENERATING VISUALIZATIONS ===$(NC)"
	
	@$(RUCHY) run ../../scripts/graphs.ruchy
	
	@echo "$(GREEN)Visualizations generated!$(NC)"
	@echo ""

# Step 6: Generate scientific report
report: $(RESULTS_DIR) verify benchmark statistics visualize
	@echo "$(YELLOW)=== GENERATING SCIENTIFIC REPORT ===$(NC)"
	
	# Copy template
	@cp ../../templates/SCIENTIFIC_REPORT.md $(RESULTS_DIR)/SCIENTIFIC_REPORT_DRAFT.md
	
	# Fill in results (would use Ruchy script in practice)
	@echo "Populating report with data..."
	
	# Merge all results
	@cat $(RESULTS_DIR)/complexity.txt >> SCIENTIFIC_REPORT.md
	@cat $(RESULTS_DIR)/provability.txt >> SCIENTIFIC_REPORT.md
	@cat $(RESULTS_DIR)/quality_score.txt >> SCIENTIFIC_REPORT.md
	@cat $(RESULTS_DIR)/statistical_analysis.md >> SCIENTIFIC_REPORT.md
	
	@echo "$(GREEN)Report generated: SCIENTIFIC_REPORT.md$(NC)"
	@echo ""

# Step 7: Full reproduction from scratch
reproduce: clean all
	@echo "$(YELLOW)=== REPRODUCIBILITY CHECK ===$(NC)"
	
	@$(RUCHY) run ../../scripts/reproduce.ruchy $(ALGORITHM)
	
	@echo "$(GREEN)✅ Results successfully reproduced!$(NC)"
	@echo "See $(RESULTS_DIR)/reproducibility.md for details"
	@echo ""

# Clean all generated files
clean:
	@echo "$(YELLOW)Cleaning generated files...$(NC)"
	@rm -rf $(RESULTS_DIR)
	@rm -f SCIENTIFIC_REPORT.md
	@find $(IMPL_DIR) -name "*.pyc" -delete
	@find $(IMPL_DIR) -name "__pycache__" -type d -delete
	@if [ -d "$(IMPL_DIR)/rust" ]; then \
		cd $(IMPL_DIR)/rust && cargo clean --quiet; \
	fi
	@if [ -d "$(IMPL_DIR)/go" ]; then \
		cd $(IMPL_DIR)/go && go clean; \
	fi
	@echo "$(GREEN)Clean complete!$(NC)"

# Continuous monitoring during development
watch:
	@echo "$(YELLOW)Watching for changes...$(NC)"
	@while true; do \
		$(MAKE) verify; \
		sleep 5; \
	done

# Quick test for development
test: verify
	@echo "$(YELLOW)Running quick test...$(NC)"
	@$(RUCHY) run $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy

# Performance profiling
profile:
	@echo "$(YELLOW)=== PERFORMANCE PROFILING ===$(NC)"
	@$(RUCHY) run $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy --profile > $(RESULTS_DIR)/profile.txt
	@echo "Profile saved to $(RESULTS_DIR)/profile.txt"

# Memory analysis
memory:
	@echo "$(YELLOW)=== MEMORY ANALYSIS ===$(NC)"
	@valgrind --tool=massif --massif-out-file=$(RESULTS_DIR)/memory.out \
		$(RUCHY) run $(IMPL_DIR)/ruchy/$(ALGORITHM).ruchy
	@ms_print $(RESULTS_DIR)/memory.out > $(RESULTS_DIR)/memory.txt
	@echo "Memory analysis saved to $(RESULTS_DIR)/memory.txt"

# Compare with other algorithms
compare:
	@echo "$(YELLOW)=== COMPARATIVE ANALYSIS ===$(NC)"
	@for alg in $(shell ls ../); do \
		if [ -f "../$$alg/SCIENTIFIC_REPORT.md" ]; then \
			echo "$$alg: "; \
			grep "Ruchy/Rust ratio" ../$$alg/SCIENTIFIC_REPORT.md || true; \
		fi; \
	done

# Validate reproducibility claim
validate:
	@echo "$(YELLOW)=== VALIDATING REPRODUCIBILITY ===$(NC)"
	@$(MAKE) clean
	@$(MAKE) all > $(RESULTS_DIR)/validation.log 2>&1
	@echo "Checking for consistency..."
	@# Would compare with previous results
	@echo "$(GREEN)Validation complete!$(NC)"

# Install dependencies
deps:
	@echo "$(YELLOW)Installing dependencies...$(NC)"
	@command -v $(RUCHY) >/dev/null 2>&1 || { echo "Ruchy not found. Please install from: https://ruchy-lang.org"; exit 1; }
	@command -v cargo >/dev/null 2>&1 || { echo "Rust not found. Please install from: https://rustup.rs"; exit 1; }
	@command -v python3 >/dev/null 2>&1 || { echo "Python 3 not found. Please install Python 3.8+"; exit 1; }
	@command -v node >/dev/null 2>&1 || { echo "Node.js not found. Please install from: https://nodejs.org"; exit 1; }
	@command -v go >/dev/null 2>&1 || { echo "Go not found. Please install from: https://go.dev"; exit 1; }
	@echo "$(GREEN)All dependencies satisfied!$(NC)"

# Print configuration
config:
	@echo "Current Configuration:"
	@echo "====================="
	@echo "ALGORITHM: $(ALGORITHM)"
	@echo "ITERATIONS: $(ITERATIONS)"
	@echo "WARMUP: $(WARMUP)"
	@echo "CONFIDENCE: $(CONFIDENCE)"
	@echo "SIZES: $(SIZES)"
	@echo "LANGUAGES: $(LANGUAGES)"

.SILENT: help config